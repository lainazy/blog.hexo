<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[浏览器学习记录]]></title>
    <url>%2F2017%2F09%2F11%2Fbrowser-study%2F</url>
    <content type="text"><![CDATA[浏览器多线程 Javascript引擎线程 (单线程运行且与GUI渲染线程互斥，脚本执行会阻塞Http请求线程(即阻塞资源的下载)和网上所说的有点冲突) GUI渲染线程 (与Javascript引擎线程互斥，渲染树的构建会等待css解析完成) 事件触发线程 定时触发器线程 (setTimeout) Http请求线程 (同一个主机有最大并行连接数限制) css资源下载和解析时会阻塞GUI渲染线程(阻塞渲染树(rendering tree)渲染，不阻塞DOM解析) js资源下载和执行时会阻塞GUI渲染线程(阻塞DOM解析和渲染树(rendering tree)渲染) 有些浏览器(safari、chrome、firefox等)在css资源下载和解析时会延迟其之后的js代码的执行(不阻塞js资源下载) 个人理解：资源的下载应该分为同步下载(阻塞GUI渲染线程)和异步下载(不阻塞GUI渲染线程)，默认情况下所有资源都为同步下载，script标签加defer后为异步下载 Event loops 浏览器必须使用事件循环(event loops)协调异步(事件、接口、脚本、渲染、网络等)。 事件循环有对应 browsing contexts 和 workers 的两种类型。 一个事件循环(event loop)有一个或多个任务队列(task queue)。 任务(task)通常有4种任务源(task source)： DOM操作任务源(DOM manipulation task source) 用户交互任务源(user interaction task source) 网络请求任务源(networking task source) 浏览器历史任务源(history traversal task source) 来自同一个task source的所有任务必须放入同一个task queue，即一种task source对应一个task queue。同一个task queue是按先进先出顺序执行的。 浏览器可以根据task queue中task source的不同，给予task queue不同的优先级。由浏览器决定挑哪一个task queue中的队首task执行。 任务(task)分为两类： 宏任务(macro-task)：script(js codes as a whole in script tag), setTimeout|setInterval, setImmediate, requestAnimationFrame, I/O, UI rendering. 微任务(micro-task)：process.nextTick, Promise(callback function in then), Object.observe, MutationObserver. – nextTick queue &gt; Promise queue js引擎会把task push到对应的macrotask queue(即task queue)或microtask queue中。 在event loop的一个回合中，会先从macrotask queue中取出队首的task进行执行；执行完毕后，再依次执行microtask queue中的所有任务；如果在执行过程中添加了新的microtask，则会在当前的回合中继续执行，直到全部mircotask执行完毕才进入下一个event loop回合。 事件循环执行流程如下： 123456789101112131415An event loop must continually run through the following steps for as long as it exists: 1. select the oldest task(task A) in task queues.If task A is null(means task queues is empty),jump to step 5(microtasks steps) 2. set "currently running task" to "task A" 3. run "task A"(means run the callback function) 4. set "currently running task" back to null,and remove "task A" from its task queue 5. perform microtask queue (a). select the oldest task(task x) in microtask queue (b). if task x is null(means microtask queues is empty),jump to step (g) (c). set "currently running task" to "task x" (d). run "task x" (e). set "currently running task" to null,remove "task x" from the microtask queue (f). select next oldest task in microtask queue,jump to step(b) (g). finish microtask queue 6. update rendering (应该是在GUI渲染线程中执行渲染队列(Render queue)中的所有UI render任务) 7. next routnd:jump to step 1 渲染队列(Render queue)：浏览器在1s中渲染页面60次，每16ms就会往Render queue中添加一个UI render任务。但是浏览器只有在调用栈(Call stack)为空时才有机会执行该任务。 microtask任务执行时间过长会导致UI渲染的阻塞和macrotask任务的阻塞(应该是下一个事件循环回合的macrotask)。 nodejs的process.nextTick限制1000个tick任务，以使macrotask得以执行。 总结：1 round event loop = 1 macrotask + n microtask + rendering 相关链接： 浏览器组成、线程及event loop详解事件循环机制]]></content>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javascript学习记录]]></title>
    <url>%2F2017%2F09%2F11%2Fjs-study%2F</url>
    <content type="text"><![CDATA[作用域、执行上下文、作用域链、闭包 作用域(静态)：标识符(变量名和函数名)的作用范围在代码编译阶段通过词法分析就已经确定 执行上下文： 创建阶段：生成变量对象(arguments，函数声明，变量声明)、维护作用域链(执行上下文作用域链)、确定this 执行阶段：变量对象转换为活动对象、执行可执行代码 作用域链： 函数作用域链：函数创建时保存在函数对象内部属性[[Scopes]]中，由不包含函数自身作用域对象的所有上级作用域对象形成的集合 执行上下文作用域链：函数执行时，创建自身作用域对象(活动对象)，并将其加入到函数作用域链顶端形成的集合 变量对象与活动对象的关系：this + 变量对象(创建阶段) = 活动对象(执行阶段) 闭包与变量对象的关系：闭包的本质就是变量对象 作用域与变量对象的关系：变量对象就是函数执行时生成的函数作用域对象 作用域链与变量对象的关系：作用域链就是由变量对象(闭包、全局作用域对象)构成的单向链表，实际上是一个指向变量对象的指针列表 作用域链与原型链的关系： 作用域链：针对函数中的变量及函数 原型链：针对对象中的成员变量 this 如果函数被某一个对象所拥有，那么该函数在调用时，内部的this指向该对象。– obj.fn() =&gt; fn()中的this指向obj(调用者对象) 如果函数存在一个数组中，那么通过数组索引调用该函数时，函数内部的this指向该数组。– arr: [fn(){}], arr0 =&gt; fn()中的this指向arr(调用者对象)，可以把arr0看成arr.fn() 如果函数独立调用，那么该函数内部的this，则指向undefined。– fn() =&gt; fn()中的this指向undefined(没有调用者对象) 但是在非严格模式中，当this指向undefined时，它会被自动指向全局对象。– fn() =&gt; fn()中的this指向window 使用call/apply方法显示指定调用者对象。– fn.call(obj) =&gt; fn()中的this指向obj(调用者对象)，本质上其实应该是通过call()中的this指向fn函数对象实现的 结论：函数调用时，内部的this永远指向调用者对象。this的含义不是作用域，不指向作用域对象(变量对象) prototype、__proto__ 所有对象(对象、数组、函数等)都具有内置属性__proto__，__proto__指向该对象的构造函数的原型(prototype)对象，原型链就是通过__proto__确定 函数才具有prototype属性，prototype指向函数的原型对象，普通对象和数组没有prototype属性 函数的原型(prototype)对象上才有constructor属性，constructor指向函数自身，普通对象和数组没有constructor属性 对象获取某个属性时，先在对象自身范围内查找，自身范围内没有找到该属性时，再通过__proto__属性一级一级地向上在其构造函数的原型(prototype)对象上查找 {}，new Object()，Object.create(null) 及 new func()，Object.create(func.prototype) 的区别 var a = {}; – {}创建方式的速度比new Object()快，因为new方式要做额外的处理 var b = new Object(); – a == b // false，a和b是两个对象，但其内部是一样的，b.constructor === b.__proto__.constructor === Object // true var c = Object.create(null); – 创建的对象中没有任何属性，__proto__属性也没有 var d = new Object(a); – a === d // true，new Object() 如果传入的参数是对象，返回的就是它自身，如果传入的参数是数字或字符串，返回的是Number或String对象(与传入参数==而不===) var e = Object.create(a); – e.__proto__ === a // true，Object.create(prototype[, descriptors]) 函数用来创建一个具有指定原型且可选择性地包含指定属性的对象 var func = function (name, option) { this.name = name; this.option = option; }; var obj = new func(&apos;abc&apos;, {x:1, y:2}); – 实际的创建过程：先创建一个空对象，将其__proto__属性指向函数的原型，将this指向这个空对象并运行这个函数– 实际的创建过程代码：var obj = new Object(); obj.__proto__ = func.prototype; func.apply(obj, [‘abc’, {x:1, y:2}]);– obj对象自身中含有name和option属性 func.prototype.name = &apos;abc&apos;; func.prototype.option = {x:1, y:2}; var obj = Object.create(func.prototype); – obj对象自身中不含name和option属性，但可以通过访问其原型获取到name和option的值– 修改属性时会在自身添加该属性，如修改name会在obj中添加name字段，不会修改原型中的name属性– 修改对象的属性时，会先在原型链中查询是否存在该对象，若存在则修改原型链中已经存在的该对象的属性，若原型链中不存在该对象，则报错 ES6 Promise vs JQuery Promise ES6中引入了一个microtask(job) queue概念，ES6 Promise通过microtask queue实现，resolve()执行时依次将then()中的回调函数加入microtask queue JQuery Promise的then()中回调函数的执行并不保证是异步的，resolve()/reject()的执行方式(sync/async)决定了then()中回调函数的执行方式 JQuery Promise的实现原理： JQuery内部会维护一个用来存放then()中回调函数的数组 return deferred.promise()执行会返回一个Promise对象，然后会同步依次执行Promise对象的then()将其中的回调函数依次放入数组，并尝试执行数组中的回调函数 resolve()执行时会修改Promise对象的状态(pending -&gt; resolved/fulfilled)，并尝试执行数组中的回调函数 执行数组中的回调函数：遍历数组并根据Promise对象的状态(pending/resolved/fulfilled/rejected)做相应的执行 相关链接： ES6 Promise和JQuery中Promise的区别]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS学习记录]]></title>
    <url>%2F2017%2F09%2F11%2Fcss-study%2F</url>
    <content type="text"><![CDATA[过度受限计算规则1234567&#123; position: absolute; top: 0; //值为任意数值或百分数 bottom: 0; //值为任意数值或百分数 height: 100%; //值为任意数值或百分数 margin: auto; //值必须为auto才能触发margin重计算&#125; 以上Css属性组合使用时(过度受限)有如下结果： margin-top = margin-bottom; margin-top/margin-bottom值计算公式: (包含块height - height - top - bottom) / 2; 距离顶边界偏移量计算公式: (包含块height - height + top - bottom) / 2; display &amp; position &amp; float 彼此的交互作用规则 如果display的值为none，position和float无效。此时不生成box。 如果position的值不为static或relative，box被绝对定位，float的计算值为none，display的计算值设定规则如下： 当display: inline-table时，display的计算值为table； 当display: inline | inline-block | run-in | table-* 系时，display的计算值为block； 当display: inline-flex时，display的计算值为flex； 其它情况为指定值； 如果float的值不是none，box是浮动的，display的计算值设定规则如上。 如果元素为根元素，display的计算值设定规则如上。 其余情况下display的值就是其指定值。 总结：绝对定位元素、浮动元素和根元素的display属性会被块级化。 盒子模型 盒子模型由外到内结构：position-box &gt; margin-box &gt; border-box &gt; scroll-box[scrollbar(右+下) + client-box(即padding-box)] &gt; padding-box &gt; content-box 盒模型 width/height 使用值计算公式如下： box-sizing: border-box时： style.width = borderBoxWidth style.height = borderBoxHeight box-sizing: content-box时： style.width = contentBoxWidth + scrollbarWidth style.height = contentBoxHeight + scrollbarHeight offsetWidth = borderBoxWidth = clientWidth + scrollbarWidth + style.borderLeft + style.borderRight offsetHeight = borderBoxHeight = clientHeight + scrollbarHeight + style.borderTop + style.borderBottom clientWidth = paddingBoxWidth = contentBoxWidth + style.paddingLeft + style.paddingRight clientHeight = paddingBoxHeight = contentBoxHeight + style.paddingTop + style.paddingBottom 置换元素 置换元素本质上只是一个占位符，是一个inline元素，和普通inline元素的区别在于其置换后的内容有默认宽高，设置width/heigth时，设置的是其置换后内容的width/height。 个人推测：inline置换元素会自动将display: inline转换成display: inline-block显示，所以拥有和inline-block元素类似的显示特点。 推测依据： &lt;img&gt; &lt;textarea&gt; 元素设置成display: inline，仍可以设置width/height，并且margin不会折叠，说明有生成新的BFC，和inline-block元素特点一致。 &lt;img&gt; &lt;textarea&gt; 元素设置成display: block，margin会发生折叠，说明block置换元素不会生成新的BFC，失去了inline-block元素的特点。 所以个人推测：行内置换元素的特点是通过display: inline-block来实现的。 另一种可能：置换元素本质上只是一个占位符，所以本质就是一个inline元素，所以只有设置为display: inline时才有其特点。]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杂记]]></title>
    <url>%2F2017%2F09%2F11%2Flearn-by-self%2F</url>
    <content type="text"><![CDATA[Mac 开发环境搭建 homebrew安装 – 执行 /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; node安装 – 通过nvm安装，nvm使用homebrew安装 jdk安装 – 执行java -version，若电脑本来没有安装jdk会自动提示进入官网下载jdk安装 android sdk安装 – 可以使用brew install android-sdk安装（注意需要翻墙） Xcode命令行工具安装 – 执行xcode-select –install（网上说其中包含git，但我没找到） git安装 – 执行brew install git svn安装 – 在xclient.info网站下载cornerstone工具安装，显然任何来源选项并直接选择：sudo spctl –master-disable cordova安装 – 执行sudo npm install -g cordova（npm所有的安装最好都翻墙） ionic安装 – 执行sudo npm install -g ionic gulp安装 – 执行sudo npm install -g gulp webpack安装 – 执行sudo npm install -g webpack vue-cli安装 – 执行sudo npm install -g vue-cli Mac Cordova/Ionic 打 android –release 包 ionic build android --release – 生成android-armv7-release-unsigned.apk文件 keytool -genkey -v -keystore release-key.keystore(数字签名文件名) -alias alias_name(项目别名) -keyalg RSA -keysize 2048 -validity 10000 – 生成数字签名文件 ln -s platforms/androidild/outputs/apk android-apk(软链接替身名) – 给android-armv7-release-unsigned.apk文件所在目录制作替身 ls android-apk – 查看android-apk软链接对应的目录 jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -tsa https://timestamp.geotrust.com/tsa -keystore release-key.keystore android-apk/android-armv7-release-unsigned.apk alias_name – 给apk文件添加签名 jarsigner -verify -verbose -certs android-apk/android-armv7-release-unsigned.apk – 校验apk文件，可不执行 ln -s android-sdkild-tools/24.0.0(zipalign所在目录) build-tools-24(软链接替身名) – 给zipalign工具制作替身 build-tools-24/zipalign -v 4 android-apk/android-armv7-release-unsigned.apk android-apk/android-armv7-release.apk(优化压缩后的文件名) – 优化压缩apk文件并重命名 jarsigner -verbose -keystore release-key.keystore(数字签名文件名) -signedjar android-armv7-release.apk android-armv7-release-unsigned.apk alias_name(项目别名) – 简写CLI 用 JS 获取 url 中参数的方法（正则表达式）12345function getUrlValue(key) &#123; const reg = new RegExp("(^|&amp;)" + key + "=([^&amp;]*)(&amp;|$)"); const result = window.location.search.substr(1).match(reg); return result &amp;&amp; decodeURIComponent(result[2]);&#125; 用 JS 获取 url 中【协议://主机名:端口号】 的方法（正则表达式）1url.replace(url.replace(/\w+:\/\/\w+(\.\w+)+(:\d+)*/, ''), ''); 微信页面头标题更新 （iframe添加 onload监听事件的方式）1234567891011121314function updateWxTitle(title) &#123; var body = document.getElementsByTagName('body')[0]; document.title = title; var iframe = document.createElement("iframe"); iframe.setAttribute("src", "/favicon.ico"); iframe.style.display = 'none'; var onLoad = function () &#123; setTimeout(function () &#123; document.body.removeChild(iframe); &#125;, 0); &#125;; iframe.onload = onLoad(); // iframe.addEventListener('load', onLoad, false)在有些android手机上无效 document.body.appendChild(iframe);&#125; 生成随机字符串（可设置字符串长度范围或固定长度）12345678910111213function generateString(randomLengthFlag, minLength, maxLength) &#123; const strArray = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'.split(''); let randomStrLength = minLength; let randomStr = ''; if (randomLengthFlag) &#123; //true表示长度不固定 randomStrLength = Math.round(Math.random() * (maxLength - minLength)) + minLength; &#125; for (let i = 0, index; i &lt; randomStrLength; i++) &#123; index = Math.round(Math.random() * (strArray.length - 1)); randomStr += strArray[index]; &#125; return randomStr;&#125; JS 将数字转换成大写金额123456789101112131415161718192021222324252627282930313233var digitUppercase =function(n)&#123; var fraction =['角','分']; var digit =[ '零','壹','贰','叁','肆', '伍','陆','柒','捌','玖' ]; var unit =[ ['元','万','亿'], ['','拾','佰','仟'] ]; var head = n &lt;0?'欠':''; n =Math.abs(n); var s =''; for(var i =0; i &lt; fraction.length; i++)&#123; s +=(digit[Math.floor(n *10*Math.pow(10, i))%10]+ fraction[i]).replace(/零./,''); &#125; s = s ||'整'; n =Math.floor(n); for(var i =0; i &lt; unit[0].length &amp;&amp; n &gt;0; i++)&#123; var p =''; for(var j =0; j &lt; unit[1].length &amp;&amp; n &gt;0; j++)&#123; p = digit[n %10]+ unit[1][j]+ p; n =Math.floor(n /10); &#125; s = p.replace(/(零.)*零$/,'').replace(/^$/,'零')+ unit[0][i]+ s; &#125; return head + s.replace(/(零.)*零元/,'元') .replace(/(零.)+/g,'零') .replace(/^整$/,'零元整');&#125;;console.log(digitUppercase(7682.01)); //柒仟陆佰捌拾贰元壹分console.log(digitUppercase(7682)); //柒仟陆佰捌拾贰元整console.log(digitUppercase(951434677682.00)); //玖仟伍佰壹拾肆亿叁仟肆佰陆拾柒万柒仟陆佰捌拾贰元整 校验价格输入的正则表达式（vue）1&lt;input type="tel" placeholder="¥" :value="price" @input="input($event.target, price)"&gt; 12345input(element, price) &#123; element.value = element.value.replace(/\D/g, ''); element.value = element.value == 0 ? element.value &amp;&amp; 0 : element.value.replace(/^0+/g, ''); price = element.value;&#125; 单行评级组件1"★★★★★☆☆☆☆☆".slice(5 - rate, 10 - rate); 数字金额化1var format = test.replace(/\B(?=(\d&#123;3&#125;)+(?!\d))/g, ','); 防抖函数123456789101112function debounce(fn, delay, context) &#123; let timeoutId = null; return () =&gt; &#123; clearTimeout(timeoutId); let args = arguments; timeoutId = setTimeout(() =&gt; &#123; fn.apply(context, args); &#125;, delay); &#125;;&#125;;]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git命令]]></title>
    <url>%2F2017%2F09%2F11%2Fgit-cmd%2F</url>
    <content type="text"><![CDATA[Git Cmd Git 使用流程（当前处于个人分支） git status – 查看工作空间或暂存区与本地仓库的区别 git add . – 将工作空间中改动的文件添加到暂存区 git commit -m &#39;注释&#39; – 将暂存区中的内容提交到本地仓库 git checkout develop – 切换到本地仓库develop分支 git pull origin develop – 从远程仓库develop分支拉取最新数据到本地仓库当前(个人)分支，有冲突时解决 git status -&gt; git add . -&gt; git commit -m &#39;注释&#39; – 有冲突时执行 git merge [--squash] &lt;个人分支名&gt; – 将本地仓库中个人分支的代码合并到本地仓库develop分支，一般没有冲突，若有冲突解决，–squash选项表示合并完之后不自动commit git status -&gt; git add . -&gt; git commit -m &#39;注释&#39; – 有冲突时执行 git push origin develop – 将本地仓库develop分支内容推送到远程仓库develop分支 git checkout &lt;个人分支名&gt; – 切换回本地仓库个人分支 git merge develop – 将本地仓库develop分支中的代码合并到本地仓库中的个人分支 git pull 和 git push 用法 git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; – 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。 git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt; – 如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。 git push origin :master 等同于 git push origin --delete master – 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux命令学习记录]]></title>
    <url>%2F2017%2F09%2F11%2Flinux-cmd%2F</url>
    <content type="text"><![CDATA[文件管理1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950cat：命令用于连接文件并打印到标准输出设备上。chattr：命令用于改变文件属性。--macos中不存在lsattr：命令用于显示文件属性。--macos中不存在chgrp：命令用于变更文件或目录的所属群组。chmod：命令可以藉以控制文件如何被他人所调用。chown：命令将指定文件的拥有者改为指定的用户或组。cksum：命令用于检查文件的CRC是否正确。确保文件从一个系统传输到另一个系统的过程中不被损坏。cmp：命令用于比较两个文件是否有差异。diff：命令用于比较文件的差异。diffstat：命令根据diff的比较结果，显示统计数字。file：命令用于辨识文件类型。find：命令用来在指定目录下查找文件。git：命令是文字模式下的文件管理员。(貌似就是我们常用的git)gitview：命令用于观看文件的内容，它会同时显示十六进制和ASCII格式的字码。--macos中不存在indent：命令用于调整C原始代码文件的格式。cut：命令用于显示每行从开头算起 num1 到 num2 的文字。ln：命令是为某一个文件在另外一个位置建立一个同步的链接。less：命令用来浏览文件。与more类似，但使用less可以随意浏览文件，而more仅能向前移动，却不能向后移动，而且less在查看之前不会加载整个文件。locate：命令用于查找符合条件的文档。locate会去保存文档和目录名称的数据库内，查找合乎范本样式条件的文档或目录。mattrib：命令用来变更或显示MS-DOS文件的属性。--macos中不存在mc：命令用于提供一个菜单式的文件管理程序。--macos中不存在mdel：命令用来删除MS-DOS格式的档案。--macos中不存在mdir：命令用于显示MS-DOS目录。mktemp：命令用于建立暂存文件。more：命令类似cat ，不过会以一页一页的形式显示。mmove：命令用于在MS-DOS文件系统中，移动文件或目录，或更改名称。--macos中不存在mread：命令用于将MS-DOS文件复制到Linux/Unix的目录中。--macos中不存在mren：命令用于更改MS-DOS文件或目录的名称，或是移动文件或目录。--macos中不存在mtools：命令用于显示mtools支持的指令。--macos中不存在mtoolstest：命令用于测试并显示mtools的相关设置。--macos中不存在mv：命令用来为文件或目录改名、或将文件或目录移入其它位置。od：命令用于输出文件内容。指令会读取所给予的文件的内容，并将其内容以八进制字码呈现出来。paste：命令用于合并文件的列。patch：命令用于修补文件。rcp：命令用于复制远程文件或目录。--macos中不存在rm：命令用于删除一个文件或者目录。slocate：命令查找文件或目录。slocate本身具有一个数据库，里面存放了系统中文件与目录的相关信息。--macos中不存在split：命令用于将一个文件分割成数个。tee：命令用于读取标准输入的数据，并将其内容输出成文件。tmpwatch：命令用于删除暂存文件。--macos中不存在touch：命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。umask：命令指定在建立文件时预设的权限掩码。which：命令用于查找文件。cp：命令主要用于复制文件或目录。whereis：命令用于查找文件。mcopy：命令用来复制 MS-DOS 格式文件到 Linux 中，或是由 Linux 中复制 MS-DOS 文件到磁片上。--macos中不存在mshowfat：命令用于显示MS-DOS文件在FAT中的记录。--macos中不存在rhmask：命令用于对文件进行加密和解密操作。--macos中不存在scp：命令用于Linux之间复制文件和目录。AWK：是一种处理文本文件的语言，是一个强大的文本分析工具。 文档编辑123456789101112131415161718192021222324252627col：命令用于过滤控制字符。colrm：命令用于滤掉指定的行。comm：命令用于比较两个已排过序的文件。csplit：命令用于分割文件。ed：命令是文本编辑器，用于文本编辑。egrep：命令用于在文件内查找指定的字符串。ex：命令用于在Ex模式下启动vim文本编辑器。fgrep：命令用于查找文件里符合条件的字符串。fmt：命令用于编排文本文件。fold：命令用于限制文件列宽。grep：命令用于查找文件里符合条件的字符串。ispell：命令用于拼写检查程序。--macos中不存在jed：命令用于编辑文本文件。--macos中不存在joe：命令用于编辑文本文件。--macos中不存在join：命令用于将两个文件中，指定栏位内容相同的行连接起来。look：命令用于查询单词。mtype：命令为mtools工具指令，模拟MS-DOS的type指令，可显示MS-DOS文件的内容。pico：命令用于编辑文字文件。rgrep：命令用于递归查找文件里符合条件的字符串。--macos中不存在sed：命令是利用script来处理文本文件。sort：命令用于将文本文件内容加以排序。spell：命令可建立拼写检查程序。--macos中不存在tr：命令用于转换或删除文件中的字符。expr：命令是一个手工命令行计数器。uniq：命令用于检查及删除文本文件中重复出现的行列。wc：命令用于计算字数。let：命令是 BASH 中用于计算的工具，用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量。 文件传输123456789101112131415lprm：命令用于将一个工作从打印机贮列中移除。lpr：命令用于将一个或多个文件放入打印队列等待打印。lpq：命令用于查看一个打印队列的状态，该程序可以查看打印机队列状态及其所包含的打印任务。lpd：命令是一个常驻的打印机管理程序，它会根据 /etc/printcap 的内容来管理本地或远端的打印机。--macos中不存在bye：命令用于中断 FTP 连线并结束程序。ftp：命令设置文件系统相关功能。uuto：命令将文件传送到远端的UUCP主机。uupick：命令处理传送进来的文件。uucp：命令用于在Unix系统之间传送文件。uucico：命令UUCP文件传输服务程序。tftp：命令用于传输文件。ncftp：命令用于传输文件。--macos中不存在ftpshut：命令在指定的时间关闭FTP服务器。--macos中不存在ftpwho：命令用于显示目前所有以FTP登入的用户信息。--macos中不存在ftpcount：命令用于显示目前以FTP登入的用户人数。--macos中不存在 磁盘管理1234567891011121314151617181920212223242526272829cd：命令用于切换当前工作目录至dirName(目录参数)。df：命令用于显示目前在Linux系统上的文件系统的磁盘使用情况统计。dirs：命令用于显示目录记录。du：命令用于显示目录或文件的大小。edquota：命令用于编辑用户或群组的磁盘配额。eject：命令用于退出抽取式设备。--macos中不存在mcd：为mtools工具指令，可在MS-DOS文件系统中切换工作目录。--macos中不存在mdeltree：命令可用来删除 MSDOS 格式档案及目录。--macos中不存在mdu：命令用于显示MS-DOS目录所占用的磁盘空间。--macos中不存在mkdir：命令用于建立名称为 dirName 之子目录。mlabel：命令用于设定磁盘的标签(Label)。--macos中不存在mmd：命令用于在MS-DOS文件系统中建立目录。--macos中不存在mrd：命令用于删除MS-DOS文件系统中的目录。--macos中不存在mzip：命令是Zip/Jaz磁盘驱动器控制指令。--macos中不存在pwd：命令用于显示工作目录。quota：命令用于显示磁盘已使用的空间与限制。mount：命令是经常会使用到的命令，它用于挂载Linux系统外的文件。mmount：命令用于挂入MS-DOS文件系统。--macos中不存在rmdir：命令删除空的目录。rmt：命令通过进程间通信远程控制磁带机。--macos中不存在stat：命令用于显示inode内容。tree：命令用于以树状图列出目录的内容。--macos中不存在umount：命令用于卸除文件系统。ls：命令用于显示指定工作目录下之内容(列出目前工作目录所含之文件及子目录)。quotacheck：命令用于检查磁盘的使用空间与限制。quotaoff：命令用于关闭磁盘空间限制。lndir：命令用于连接目录内容。--macos中不存在repquota：命令用于检查磁盘空间限制的状态。quotaon：命令用于开启磁盘空间限制。 文件管理1234567891011121314cat功能：cat 命令用于连接文件并打印到标准输出设备上。即查看文件语法：cat [-AbeEnstTuv] [--help] [--version] fileName参数说明：(macos上只能使用缩写) -n 或 --number：由 1 开始对所有输出的行数编号。 -b 或 --number-nonblank：和 -n 相似，只不过对于空白行不编号。 -s 或 --squeeze-blank：当遇到有连续两行以上的空白行，就代换为一行的空白行。 -v 或 --show-nonprinting：使用 ^ 和 M- 符号，除了 LFD 和 TAB 之外。 -E 或 --show-ends : 在每行结束处显示 $。--macos中不合法 -T 或 --show-tabs: 将 TAB 字符显示为 ^I。--macos中不合法 -A 或 --show-all：等价于-vET。--macos中不合法 -e：等价于-vE。 -t：等价于-vT。 -u：忽略输出。--macos上实际操作好像没效果，仍能输出 12345678910111213141516171819chattr (macos中不存在)功能：chattr 命令用于改变文件属性。补充说明：这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式： a：让文件或目录仅供附加用途。 b：不更新文件或目录的最后存取时间。 c：将文件或目录压缩后存放。 d：将文件或目录排除在倾倒操作之外。 i：不得任意更动文件或目录。 s：保密性删除文件或目录。 S：即时更新文件或目录。 u：预防意外删除。语法：chattr [-RV][-v&lt;版本编号&gt;][+/-/=&lt;属性&gt;][文件或目录...]参数说明： -R：递归处理，将指定目录下的所有文件及子目录一并处理。 -v&lt;版本编号&gt;：设置文件或目录版本。 -V：显示指令执行过程。 +&lt;属性&gt;：开启文件或目录的该项属性。 -&lt;属性&gt;：关闭文件或目录的该项属性。 =&lt;属性&gt;：指定文件或目录的该项属性。 1234567891011lsattr (macos中不存在)功能：lsattr 命令用于显示文件属性。补充说明：用chattr执行改变文件或目录的属性，可执行lsattr指令查询其属性。语法：lsattr [-adlRvV][文件或目录...]参数说明： -a：显示所有文件和目录，包括以"."为名称开头字符的额外内建，现行目录"."与上层目录".."。 -d：显示，目录名称，而非其内容。 -l：此参数目前没有任何作用。 -R：递归处理，将指定目录下的所有文件及子目录一并处理。 -v：显示文件或目录版本。 -V：显示版本信息。 12345678910111213chgrp功能：chgrp 命令用于变更文件或目录的所属群组。补充说明：在UNIX系统家族里，文件或目录权限的掌控以拥有者及所属群组来管理。您可以使用chgrp指令去变更文件与目录的所属群组，设置方式采用群组名称或群组识别码皆可。语法：chgrp [-cfhRv][--help][--version][所属群组][文件或目录...] 或 chgrp [-cfhRv][--help][--reference=&lt;参考文件或目录&gt;][--version][文件或目录...]参数说明 (macos中参数只能使用"-"，不能使用"--") -c 或 --changes：效果类似"-v"参数，但仅回报更改的部分。--macos中不合法 -f 或 --quiet或--silent：不显示错误信息。 -h 或 --no-dereference：只对符号连接的文件作修改，而不更动其他任何相关文件。 -R 或 --recursive：递归处理，将指定目录下的所有文件及子目录一并处理。 -v 或 --verbose：显示指令执行过程。 --help：在线帮助。--macos中不合法 --reference=&lt;参考文件或目录&gt;：把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。--macos中不合法 --version：显示版本信息。--macos中不合法 123456789101112131415161718chmod (macos中语法存在较大差异，可执行man chmod查看)功能：chmod 可以藉以控制文件如何被他人所调用。补充说明：Linux/Unix 的文件调用权限分为三级: 文件拥有者、群组、其他。使用权限: 所有使用者语法：chmod [-cfvR] [--help] [--version] mode file...参数说明 mode: 权限设定字串，格式: [ugoa...][[+-=][rwxX]...][,...]其中： u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。 + 表示增加权限、- 表示取消权限、= 表示唯一设定权限。 r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。其他参数说明： -c : 若该文件权限确实已经更改，才显示其更改动作。--macos中不合法 -f : 若该文件权限无法被更改也不要显示错误讯息。 -v : 显示权限变更的详细资料。 -R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)。 --help : 显示辅助说明。--macos中不合法 --version : 显示版本。--macos中不合法 12345678910111213141516171819chown功能：chown 将指定文件的拥有者改为指定的用户或组。补充说明： Linux/Unix 是多人多工操作系统，所有的文件皆有拥有者。利用 chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID； 组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。 一般来说，这个指令只有是由系统管理者(root)所使用，一般使用者没有权限可以改变别人的文件拥有者，也没有权限可以自己的文件拥有者改设为别人。 只有系统管理者(root)才有这样的权限。使用权限: root语法：chown [-cfhvR] [--help] [--version] user[:group] file...参数说明: user : 新的文件拥有者的使用者 ID。 group : 新的文件拥有者的使用者群体(group)。 -c : 若该文件拥有者确实已经更改，才显示其更改动作。 -f : 若该文件拥有者无法被更改也不要显示错误讯息。 -h : 只对于连结(link)进行变更，而非该 link 真正指向的文件。 -v : 显示拥有者变更的详细资料。 -R : 对目前目录下的所有文件与子目录进行相同的拥有者变更(即以递回的方式逐个变更)。 --help : 显示辅助说明。--macos中不合法 --version : 显示版本。--macos中不合法 1234567891011cksum (macos中语法存在一点差异，且macos中cksum与sum功能类似，具体可执行man cksum查看)功能：cksum 命令用于检查文件的CRC是否正确。确保文件从一个系统传输到另一个系统的过程中不被损坏。补充说明： CRC是一种排错检查方式，该校验法的标准由CCITT所指定，至少可检测到99.998%的已知错误。 指定文件交由指令"cksum"进行校验后，该指令会返回校验结果供用户核对文件是否正确无误。 若不指定任何文件名称或是所给予的文件名为"-"，则指令"cksum"会从标准输入设备中读取数据。语法：cksum [--help][--version][文件...]参数说明： --help：在线帮助。--macos中不合法 --version：显示版本信息。--macos中不合法 文件…：需要进行检查的文件路径。 12345678910111213cmp功能：cmp 命令用于比较两个文件是否有差异。补充说明： 当相互比较的两个文件完全一样时，则该指令不会显示任何信息。若发现有所差异，预设会标示出第一个不同之处的字符和列数编号。 若不指定任何文件名称或是所给予的文件名为"-"，则cmp指令会从标准输入设备读取数据。语法：cmp [-clsv][-i &lt;字符数目&gt;][--help][第一个文件][第二个文件]参数说明： -c 或 --print-chars：除了标明差异处的十进制字码之外，一并显示该字符所对应字符。--macos中该参数和-b或--print-bytes效果相同 -i &lt;字符数目&gt; 或 --ignore-initial=&lt;字符数目&gt;：指定一个数目。 -l 或 --verbose：标示出所有不一样的地方。 -s 或 --quiet或--silent：不显示错误信息。 -v 或 --version：显示版本信息。 --help：在线帮助。 1234567891011121314151617181920212223242526272829303132333435363738diff功能：diff 命令用于比较文件的差异。补充说明：diff以逐行的方式，比较文本文件的异同处。所是指定要比较目录，则diff会比较目录中相同文件名的文件，但不会比较其中子目录。语法：diff [-abBcdefHilnNpPqrstTuvwy][-&lt;行数&gt;][-C &lt;行数&gt;][-D &lt;巨集名称&gt;][-I &lt;字符或字符串&gt;][-S &lt;文件&gt;][-W &lt;宽度&gt;][-x &lt;文件或目录&gt;][-X &lt;文件&gt;][--help][--left-column][--suppress-common-line][文件或目录1][文件或目录2]参数说明： (macos中参数有略微差异，可执行diff --help查看，man diff显示的帮助文档貌似不对，参数很少) -&lt;行数&gt;：指定要显示多少行的文本。此参数必须与-c或-u参数一并使用。 -a 或 --text：diff预设只会逐行比较文本文件。 -b 或 --ignore-space-change：不检查空格字符的不同。 -B 或 --ignore-blank-lines：不检查空白行。 -c,-C&lt;行数&gt; 或 --context&lt;行数&gt;：显示全部内文，并标出不同之处。 -d 或 --minimal：使用不同的演算法，以较小的单位来做比较。 -D&lt;巨集名称&gt; 或 ifdef&lt;巨集名称&gt;：此参数的输出格式可用于前置处理器巨集。 -e 或 --ed：此参数的输出格式可用于ed的script文件。 -f 或 -forward-ed：输出的格式类似ed的script文件，但按照原来文件的顺序来显示不同处。 -H 或 --speed-large-files：比较大文件时，可加快速度。 -l&lt;字符或字符串&gt; 或 --ignore-matching-lines&lt;字符或字符串&gt;：若两个文件在某几行有所不同，而这几行同时都包含了选项中指定的字符或字符串，则不显示这两个文件的差异。 -i 或 --ignore-case：不检查大小写的不同。 -l 或 --paginate：将结果交由pr程序来分页。 -n 或 --rcs：将比较结果以RCS的格式来显示。 -N 或 --new-file：在比较目录时，若文件A仅出现在某个目录中，预设会显示：Only in目录：文件A若使用-N参数，则diff会将文件A与一个空白的文件比较。 -p：若比较的文件为C语言的程序码文件时，显示差异所在的函数名称。 -P 或 --unidirectional-new-file：与-N类似，但只有当第二个目录包含了一个第一个目录所没有的文件时，才会将这个文件与空白的文件做比较。 -q 或 --brief：仅显示有无差异，不显示详细的信息。 -r 或 --recursive：比较子目录中的文件。 -s 或 --report-identical-files：若没有发现任何差异，仍然显示信息。 -S&lt;文件&gt; 或 --starting-file&lt;文件&gt;：在比较目录时，从指定的文件开始比较。 -t 或 --expand-tabs：在输出时，将tab字符展开。 -T 或 --initial-tab：在每行前面加上tab字符以便对齐。 -u,-U&lt;列数&gt; 或 --unified=&lt;列数&gt;：以合并的方式来显示文件内容的不同。 -v 或 --version：显示版本信息。 -w 或 --ignore-all-space：忽略全部的空格字符。 -W&lt;宽度&gt; 或 --width&lt;宽度&gt;：在使用-y参数时，指定栏宽。 -x&lt;文件名或目录&gt; 或 --exclude&lt;文件名或目录&gt;：不比较选项中所指定的文件或目录。 -X&lt;文件&gt; 或 --exclude-from&lt;文件&gt;：您可以将文件或目录类型存成文本文件，然后在=&lt;文件&gt;中指定此文本文件。 -y 或 --side-by-side：以并列的方式显示文件的异同之处。 --help：显示帮助。 --left-column：在使用-y参数时，若两个文件某一行内容相同，则仅在左侧的栏位显示该行内容。 --suppress-common-lines：在使用-y参数时，仅显示不同之处。 123456789101112diffstat功能：diffstat 命令根据diff的比较结果，显示统计数字。补充说明： diffstat读取diff的输出结果，然后统计各文件的插入，删除，修改等差异计量。 用户也可以直接使用"|"将diff指令所输出的结果直接送给diffstat指令进行统计结果的显示。如：diff test1 test2 | diffstat 使用该指令时，若所比较的文件或者子目录不在当前目录下，则应该使用其完整路径。语法：diffstat [-wV][-n &lt;文件名长度&gt;][-p &lt;文件名长度&gt;]参数说明： (macos中参数有很大差异，多出很多参数，可执行diffstat --help查看，man diffstat显示的帮助文档貌似不对) -n&lt;文件名长度&gt;：指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。 -p&lt;文件名长度&gt;：与-n参数相同，但此处的&lt;文件名长度&gt;包括了文件的路径。 -w：指定输出时栏位的宽度。 -V：显示版本信息。 123456789101112file功能：file 命令用于辨识文件类型。语法：file [-beLvz][-f &lt;名称文件&gt;][-m &lt;魔法数字文件&gt;...][文件或目录...]参数说明： (macos中参数有很大差异，多出很多参数，可执行file --help查看，man file显示的帮助文档貌似不对) -b：列出辨识结果时，不显示文件名称。 -c：详细显示指令执行过程，便于排错或分析程序执行的情形。 -f&lt;名称文件&gt;：指定名称文件，其内容有一个或多个文件名称呢感，让file依序辨识这些文件，格式为每列一个文件名称。 -L：直接显示符号连接所指向的文件的类别。 -m&lt;魔法数字文件&gt;：指定魔法数字文件。 -v：显示版本信息。 -z：尝试去解读压缩文件的内容。 [文件或目录...]：要确定类型的文件列表，多个文件之间使用空格分开，可以使用shell通配符匹配多个文件。 1234567891011121314151617181920212223242526272829303132333435find (macos中有以下这些参数，但不知道怎么查看，find --help不合法，find命令用法比较复杂没太搞清楚)功能：find 命令用来在指定目录下查找文件。补充说明： 任何位于参数之前的字符串都将被视为欲查找的目录名。 如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。语法：find path -option [-print][-exec -ok command] &#123;&#125;参数说明 : find 根据下列规则判断 path 和 expression，在命令列上第一个 - ( ) , ! 之前的部份为 path，之后的是 expression。 如果 path 是空字串则使用目前路径，如果 expression 是空字串则使用 -print 为预设 expression。 expression 中可使用的选项有二三十个之多，在此只介绍最常用的部份。 -mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件 -amin n : 在过去 n 分钟内被读取过 -anewer file : 比文件 file 更晚被读取过的文件 -atime n : 在过去 n 天过读取过的文件 -cmin n : 在过去 n 分钟内被修改过 -cnewer file :比文件 file 更新的文件 -ctime n : 在过去 n 天过修改过的文件 -empty : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name -ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写 -name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写 -size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。-type c : 文件类型是 c 的文件。 d: 目录 c: 字型装置文件 b: 区块装置文件 p: 具名贮列 f: 一般文件 l: 符号连结 s: socket -pid n : process id 是 n 的文件 你可以使用 () 将运算式分隔，并使用下列运算。 exp1 -and exp2 ! expr -not expr exp1 -or exp2 exp1, exp2 123456789101112131415git (没太搞懂这是个啥，貌似就是我们常用的分布式版本控制工具git)功能：git 命令是文字模式下的文件管理员。补充说明：git是用来管理文件的程序，它十分类似DOS下的Norton Commander，具有互动式操作界面。它的操作方法和Norton Commander几乎一样。语法：git操作说明： F1：执行info指令，查询指令相关信息，会要求您输入欲查询的名称。 F2：执行cat指令，列出文件内容。 F3：执行gitview指令，观看文件内容。 F4：执行vi指令，编辑文件内容。 F5：执行cp指令，复制文件或目录，会要求您输入目标文件或目录。 F6：执行mv指令，移动文件或目录，或是更改其名称，会要求您输入目标文件或目录。 F7：执行mkdir指令，建立目录。 F8：执行rm指令，删除文件或目录。 F9：执行make指令，批处理执行指令或编译程序时，会要求您输入相关命令。 F10：离开git文件管理员。 12345678910gitview (macos中命令不存在)功能：gitview 命令用于观看文件的内容，它会同时显示十六进制和ASCII格式的字码。语法：gitview [-bchilv][文件]参数说明： -b：单色模式，不使用ANSI控制码显示彩色。 -c：彩色模式，使用ANSI控制码显示色彩。 -h：在线帮助。 -i：显示存放gitview程序的所在位置。 -l：不使用先前的显示字符。 -v：显示版本信息。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859indent功能：indent 命令用于调整C原始代码文件的格式。补充说明：indent可辨识C的原始代码文件，并加以格式化，以方便程序设计师阅读。语法：indent [参数][源文件] 或 indent [参数][源文件][-o 目标文件]参数说明： -bad 或 --blank-lines-after-declarations：在声明区段或加上空白行。 -bap 或 --blank-lines-after-procedures：在程序或加上空白行。 -bbb 或 --blank-lines-after-block-comments：在注释区段后加上空白行。 -bc 或 --blank-lines-after-commas：在声明区段中，若出现逗号即换行。 -bl 或 --braces-after-if-line：if(或是else,for等等)与后面执行区段的"&#123;"不同行，且"&#125;"自成一行。 -bli&lt;缩排格数&gt; 或 --brace-indent&lt;缩排格数&gt;：设置&#123; &#125;缩排的格数。 -br 或 --braces-on-if-line：if(或是else,for等等)与后面执行跛段的"&#123;"不同行，且"&#125;"自成一行。 -bs 或 --blank-before-sizeof：在sizeof之后空一格。 -c&lt;栏数&gt; 或 --comment-indentation&lt;栏数&gt;：将注释置于程序码右侧指定的栏位。 -cd&lt;栏数&gt; 或 --declaration-comment-column&lt;栏数&gt;：将注释置于声明右侧指定的栏位。 -cdb 或 --comment-delimiters-on-blank-lines：注释符号自成一行。 -ce 或 --cuddle-else：将else置于"&#125;"(if执行区段的结尾)之后。 -ci&lt;缩排格数&gt; 或 --continuation-indentation&lt;缩排格数&gt;：叙述过长而换行时，指定换行后缩排的格数。 -cli&lt;缩排格数&gt; 或 --case-indentation-&lt;缩排格数&gt;：使用case时，switch缩排的格数。 -cp&lt;栏数&gt; 或 -else-endif-column&lt;栏数&gt;：将注释置于else与elseif叙述右侧定的栏位。 -cs 或 --space-after-cast：在cast之后空一格。 -d&lt;缩排格数&gt; 或 -line-comments-indentation&lt;缩排格数&gt;：针对不是放在程序码右侧的注释，设置其缩排格数。 -di&lt;栏数&gt; 或 --declaration-indentation&lt;栏数&gt;：将声明区段的变量置于指定的栏位。 -fc1 或 --format-first-column-comments：针对放在每行最前端的注释，设置其格式。 -fca 或 --format-all-comments：设置所有注释的格式。 -gnu 或 --gnu-style：指定使用GNU的格式，此为预设值。 -i&lt;格数&gt; 或 --indent-level&lt;格数&gt;：设置缩排的格数。 -ip&lt;格数&gt; 或 --parameter-indentation&lt;格数&gt;：设置参数的缩排格数。 -kr 或 --k-and-r-style：指定使用Kernighan&amp;Ritchie的格式。 -lp 或 --continue-at-parentheses：叙述过长而换行，且叙述中包含了括弧时，将括弧中的每行起始栏位内容垂直对其排列。 -nbad 或 --no-blank-lines-after-declarations：在声明区段后不要加上空白行。 -nbap 或 --no-blank-lines-after-procedures：在程序后不要加上空白行。 -nbbb 或 --no-blank-lines-after-block-comments：在注释区段后不要加上空白行。 -nbc 或 --no-blank-lines-after-commas：在声明区段中，即使出现逗号，仍旧不要换行。 -ncdb 或 --no-comment-delimiters-on-blank-lines：注释符号不要自成一行。 -nce 或 --dont-cuddle-else：不要将else置于"&#125;"之后。 -ncs 或 --no-space-after-casts：不要在cast之后空一格。 -nfc1 或 --dont-format-first-column-comments：不要格式化放在每行最前端的注释。 -nfca 或 --dont-format-comments：不要格式化任何的注释。 -nip 或 --no-parameter-indentation：参数不要缩排。 -nlp 或 --dont-line-up-parentheses：叙述过长而换行，且叙述中包含了括弧时，不用将括弧中的每行起始栏位垂直对其排列。 -npcs 或 --no-space-after-function-call-names：在调用的函数名称之后，不要加上空格。 -npro 或 --ignore-profile：不要读取indent的配置文件.indent.pro。 -npsl 或 --dont-break-procedure-type：程序类型与程序名称放在同一行。 -nsc 或 --dont-star-comments：注解左侧不要加上星号(*)。 -nsob 或 --leave-optional-semicolon：不用处理多余的空白行。 -nss 或 --dont-space-special-semicolon：若for或while区段仅有一行时，在分号前不加上空格。 -nv 或 --no-verbosity：不显示详细的信息。 -orig 或 --original：使用Berkeley的格式。 -pcs 或 --space-after-procedure-calls：在调用的函数名称与"&#123;"之间加上空格。 -psl 或 --procnames-start-lines：程序类型置于程序名称的前一行。 -sc 或 --start-left-side-of-comments：在每行注释左侧加上星号(*)。 -sob 或 --swallow-optional-blank-lines：删除多余的空白行。 -ss 或 --space-special-semicolon：若for或swile区段今有一行时，在分号前加上空格。 -st 或 --standard-output：将结果显示在标准输出设备。 -T：数据类型名称缩排。 -ts&lt;格数&gt; 或 --tab-size&lt;格数&gt;：设置tab的长度。 -v 或 --verbose：执行时显示详细的信息。 -version：显示版本信息。 123456789101112cut功能：cut 命令用于显示每行从开头算起 num1 到 num2 的文字。补充说明： cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。 如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。语法：cut [-bn]|[-c]|[-df] [file] --macos中语法有点不同，可以执行man cut查看，其中list为num1-num2格式参数说明: -b：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。 -c：以字符为单位进行分割。 -d：自定义分隔符，默认为制表符。 -f：与-d一起使用，指定显示哪个区域。 -n：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的范围之内，该字符将被写出；否则，该字符将被排除 12345678910111213141516171819202122232425262728293031323334ln功能：ln 命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。补充说明： 当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件， 我们只要在某个固定的目录，放上该文件，然后在其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。语法：ln [参数][源文件或目录][目标文件或目录]其中参数的格式为：[-bdfinsvF] [-S backup-suffix] [-V &#123;numbered,existing,simple&#125;] [--help] [--version] [--]命令功能详解： Linux文件系统中，有所谓的链接(link)，我们可以将其视为档案的别名，而链接又可分为两种 : 硬链接(hard link)与软链接(symbolic link)， 硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。 硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。不论是硬链接或软链接都不会将原本的档案复制一份，只会占用非常少量的磁碟空间。软链接： 1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式 2.软链接可以跨文件系统，硬链接不可以 3.软链接可以对一个不存在的文件名进行链接 4.软链接可以对目录进行链接硬链接： 1.硬链接，以文件副本的形式存在。但不占用实际空间。 2.不允许给目录创建硬链接 3.硬链接只有在同一个文件系统中才能创建参数说明：必要参数： -b 删除，覆盖以前建立的链接。 -d 允许超级用户制作目录的硬链接。 -f 强制执行。 -i 交互模式，文件存在则提示用户是否覆盖。 -n 把符号链接视为一般目录。 -s 软链接(符号链接)。 -v 显示详细的处理过程。选择参数： -S "-S&lt;字尾备份字符串&gt;"或"--suffix=&lt;字尾备份字符串&gt;"。--macos中不合法 -V "-V&lt;备份方式&gt;"或"--version-control=&lt;备份方式&gt;"。--macos中不合法 --help 显示帮助信息。--macos中不合法 --version 显示版本信息。--macos中不合法 123456789101112131415161718192021222324252627282930less功能：less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。语法：less [参数] 文件参数说明： -b &lt;缓冲区大小&gt;：设置缓冲区的大小 -e：当文件显示结束后，自动离开 -f：强迫打开特殊文件，例如外围设备代号、目录和二进制文件 -g：只标志最后搜索的关键词 -i：忽略搜索时的大小写 -m：显示类似more命令的百分比 -N：显示每行的行号 -o &lt;文件名&gt;：将less 输出的内容在指定文件中保存起来 -Q：不使用警告音 -s：显示连续空行为一行 -S：行过长时间将超出部分舍弃 -x &lt;数字&gt;：将"tab"键显示为规定的数字空格 /字符串：向下搜索"字符串"的功能 ?字符串：向上搜索"字符串"的功能 n：重复前一个搜索（与 / 或 ? 有关） N：反向重复前一个搜索（与 / 或 ? 有关） b：向后翻一页 d：向后翻半页 h：显示帮助界面 Q：退出less命令 u：向前滚动半页 y：向前滚动一行 空格键：滚动一行 回车键：滚动一页 [pagedown]：向下翻动一页 [pageup]：向上翻动一页 1234567891011locate功能：locate 命令用于查找符合条件的文档。补充说明： locate会去保存文档和目录名称的数据库内，查找合乎范本样式条件的文档或目录。一般情况我们只需要输入 locate your_file_name 即可查找指定文件。 locate与find 不同: find 是去硬盘找，locate 只在/var/lib/slocate资料库中找。 locate的速度比find快，它并不是真的查找，而是查数据库，一般文件数据库在/var/lib/slocate/slocate.db中，所以locate的查找并不是实时的，而是以数据库的更新为准，一般是系统自己维护，也可以手工升级数据库 ，命令为：locate -u语法：locate [-d ][--help][--version][范本样式...]参数说明： -d 或 --database=：配置locate指令使用的数据库。locate指令预设的数据库位于/var/lib/slocate目录里，文档名为slocate.db，您可使用这个参数另行指定。 --help：在线帮助。--macos中不合法 --version：显示版本信息。--macos中不合法 12345678910mattrib (macos中不存在)功能：mattrib 命令用来变更或显示MS-DOS文件的属性。语法：mattrib [-a|+a] [-h|+h] [-r|+r] [-s|+s] [-/] [-X] msdosfile [ msdosfiles ... ]参数说明： -a/+a 除去/设定备份属性。 -h/+h 除去/设定隐藏属性。 -r/+r 除去/设定唯读属性。 -s/+s 除去/设定系统属性。 -/ 递回的处理包含所有子目录下的档案。 -X 以较短的格式输出结果。 12345678910111213141516171819202122232425262728mc (macos中不存在)功能：mc 命令用于提供一个菜单式的文件管理程序。补充说明：执行mc之后，将会看到菜单式的文件管理程序，共分成４个部分。语法：mc [-abcdfhkPstuUVx][-C &lt;参数&gt;][-l &lt;文件&gt;][-v &lt;文件&gt;][目录]参数说明： -a：当mc程序画线时不用绘图字符画线。 -b：使用单色模式显示。 -c：使用彩色模式显示。 -C&lt;参数&gt;：指定显示的颜色。 -d：不使用鼠标。 -f：显示mc函数库所在的目录。 -h：显示帮助。 -k：重设softkeys成预设置。 -l&lt;文件&gt;：在指定文件中保存ftpfs对话窗的内容。 -P：程序结束时，列出最后的工作目录。 -s：用慢速的终端机模式显示，在这模式下将减少大量的绘图及文字显示。 -t：使用TEMPCAP变量设置终端机，而不使用预设置。 -u：不用目前的shell程序。 -U：使用目前的shell程序。 -v&lt;文件&gt;：使用mc的内部编辑器来显示指定的文件。 -V：显示版本信息。 -x：指定以xterm模式显示。相关操作： F9 or Esc+9：激活菜单栏 Tab：在两个窗口间移动 F10 or Esc+0：退出MC Control-Enter or Alt-Enter：可以将文件名拷贝到命令行 F1 or Esc+1：打开帮助页面 123456mdel (macos中不存在)功能：mdel 命令用来删除MS-DOS格式的档案。补充说明：在删除只读之前会有提示信息产生。语法：mdel [-v] msdosfile [ msdosfiles ... ]参数说明： -v 显示更多的讯息。 12345678910mdir (macos中不存在)功能：mdir 命令用于显示MS-DOS目录。补充说明：mdir为mtools工具指令，模拟MS-DOS的dir指令，可显示MS-DOS文件系统中的目录内容。语法：mdir [-afwx/][目录]参数说明： -/：显示目录下所有子目录与文件。 -a：显示隐藏文件。 -f：不显示磁盘所剩余的可用空间。 -w：仅显示目录或文件名称，并以横排方式呈现，以便一次能显示较多的目录或文件。 -X：仅显示目录下所有子目录与文件的完整路径，不显示其他信息。 12345678mktemp功能：mktemp 命令用于建立暂存文件。补充说明：mktemp建立的一个暂存文件，供shell script使用。语法：mktemp [-qu][文件名参数]参数说明：(macos中参数多了几个，可以执行man mktemp查看) -q：执行时若发生错误，不会显示任何信息。 -u：暂存文件会在mktemp结束前先行删除。 [文件名参数]：文件名参数必须是以"自定名称.XXXXXX"的格式。 123456789101112131415more功能：more 命令类似cat，不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键(space)就往下一页显示，按b键就会往回(back)一页显示，而且还有搜寻字串的功能(与vi相似)，使用中的说明文件，请按h 。语法：more [-dlfpcsu] [-num] [+/pattern] [+linenum] [fileNames..]参数说明： -num：一次显示的行数。 -d：提示使用者，在画面下方显示 [Press space to continue, 'q' to quit.] ，如果使用者按错键，则会显示 [Press 'h' for instructions.] 而不是 '哔' 声。 -l：取消遇见特殊字元 ^L（送纸字元）时会暂停的功能。 -f：计算行数时，以实际上的行数，而非自动换行过后的行数(有些单行字数太长的会被扩展为两行或两行以上)。 -p：不以卷动的方式显示每一页，而是先清除萤幕后再显示内容。 -c：跟 -p 相似，不同的是先显示内容再清除其他旧资料。 -s：当遇到有连续两行以上的空白行，就代换为一行的空白行。 -u：不显示下引号(根据环境变数 TERM 指定的 terminal 而有所不同)。 +/pattern：在每个文档显示前搜寻该字串(pattern)，然后从该字串之后开始显示。 +num：从第 num 行开始显示。 fileNames：欲显示内容的文档，可为复数个数。 1234567mmove (macos中不存在)功能：mmove 命令用于在MS-DOS文件系统中，移动文件或目录，或更改名称。补充说明：mmove为mtools工具命令，模拟MS-DOS的move命令，可在MS-DOS文件系统中移动现有的文件或目录，或是更改现有文件或目录的名称。语法：mmove [源文件或目录...][目标文件或目录]参数说明: [源文件或目录…]: 执行操作的源文件或目录路径。 [目标文件或目录]: 执行操作后的目标文件或目录路径。 1234567mread (macos中不存在)功能：mread 命令用于将MS-DOS文件复制到Linux/Unix的目录中。补充说明：mread为mtools工具命令，可将MS-DOS文件复制到Linux的文件系统中。这个命令目前已经不常用，一般都使用mcopy命令来代替。语法：mread [MS-DOS文件...][Linux文件或目录]参数说明: [MS-DOS文件…]: 执行操作的DOS源文件或目录路径。 [Linux文件或目录]: 执行操作后的Linux目标文件或目录路径。 12345678910mren (macos中不存在)功能：mren 命令用于更改MS-DOS文件或目录的名称，或是移动文件或目录。补充说明： mren为MS-DOS工具指令，与DOS下的ren指令相似，可以实现更改MS-DOS文件或目录名称。 源文件必须是磁盘上已经存在的文件，若忽略盘符及路径，则表示当前盘及当前目录的文件。 新文件名是所要更换的文件名称。新文件名称前不可以加与源文件不同的盘符及路径，因为该命令只能更改同一盘上的文件名称。语法：mren [源文件或目录...][目标文件或目录]参数说明： [源文件或目录…]：执行操作的源文件名或者源文件路径。 [目标文件或目录]：执行操作的目标文件名或者目标文件路径。 123456789101112131415mtools (macos中不存在)功能：mtools 命令用于显示mtools支持的指令。补充说明：mtools为MS-DOS文件系统的工具程序，可模拟许多MS-DOS的指令。这些指令都是mtools的符号连接，因此会有一些共同的特性。语法：mtools参数说明： -a：长文件名重复时自动更改目标文件的长文件名。 -A：短文件名重复但长文件名不同时自动更改目标文件的短文件名。 -o：长文件名重复时，将目标文件覆盖现有的文件。 -O：短文件名重复但长文件名不同时，将目标文件覆盖现有的文件。 -r：长文件名重复时，要求用户更改目标文件的长文件名。 -R：短文件名重复但长文件名不同时，要求用户更改目标文件的短文件名。 -s：长文件名重复时，则不处理该目标文件。 -S：短文件名重复但长文件名不同时，则不处理该目标文件。 -v：执行时显示详细的说明。 -V：显示版本信息。 1234mtoolstest (macos中不存在)功能：mtoolstest 命令用于测试并显示mtools的相关设置。补充说明：mtoolstest为mtools工具指令，可读取与分析mtools的配置文件，并在屏幕上显示结果。语法：mtoolstest 12345678910111213mv功能：mv 命令用来为文件或目录改名、或将文件或目录移入其它位置。语法： mv [options] source dest mv [options] source... directory参数说明： -i：若指定目录已有同名文件，则先询问是否覆盖旧文件。 -f：在mv操作要覆盖某已有的目标文件时不给任何指示。参数设置与运行结果： mv 文件名 文件名 将源文件名改为目标文件名 mv 文件名 目录名 将文件移动到目标目录 mv 目录名 目录名 目标目录已存在，将源目录移动到目标目录；目标目录不存在则改名 mv 目录名 文件名 出错 123456789101112131415161718192021222324od功能：od 命令用于输出文件内容。补充说明：od指令会读取所给予的文件的内容，并将其内容以八进制字码呈现出来。语法：od [-abcdfhilovx][-A &lt;字码基数&gt;][-j &lt;字符数目&gt;][-N &lt;字符数目&gt;][-s &lt;字符串字符数&gt;][-t &lt;输出格式&gt;][-w &lt;每列字符数&gt;][--help][--version][文件...]参数说明： -a：此参数的效果和同时指定"-ta"参数相同。 -A&lt;字码基数&gt;：选择要以何种基数计算字码。 -b：此参数的效果和同时指定"-toC"参数相同。 -c：此参数的效果和同时指定"-tC"参数相同。 -d：此参数的效果和同时指定"-tu2"参数相同。 -f：此参数的效果和同时指定"-tfF"参数相同。 -h：此参数的效果和同时指定"-tx2"参数相同。 -i：此参数的效果和同时指定"-td2"参数相同。 -j&lt;字符数目&gt; 或 --skip-bytes=&lt;字符数目&gt;：略过设置的字符数目。 -l：此参数的效果和同时指定"-td4"参数相同。 -N&lt;字符数目&gt; 或 --read-bytes=&lt;字符数目&gt;：到设置的字符数目为止。 -o：此参数的效果和同时指定"-to2"参数相同。 -s&lt;字符串字符数&gt; 或 --strings=&lt;字符串字符数&gt;：只显示符合指定的字符数目的字符串。 -t&lt;输出格式&gt; 或 --format=&lt;输出格式&gt;：设置输出格式。 -v 或 --output-duplicates：输出时不省略重复的数据。 -w&lt;每列字符数&gt; 或 --width=&lt;每列字符数&gt;：设置每列的最大字符数。 -x：此参数的效果和同时指定"-h"参数相同。 --help：在线帮助。--macos中不合法 --version：显示版本信息。--macos中不合法 12345678910paste功能：paste 命令用于合并文件的列。补充说明：paste指令会把每个文件以列对列的方式，一列列地加以合并。语法：paste [-s][-d &lt;间隔字符&gt;][--help][--version][文件...]参数说明： -d&lt;间隔字符&gt; 或 --delimiters=&lt;间隔字符&gt;：用指定的间隔字符取代跳格字符。 -s 或 --serial：串列进行而非平行处理。 --help：在线帮助。--macos中不合法 --version：显示帮助信息。--macos中不合法 [文件…]：指定操作的文件路径。 123456789101112131415161718192021222324252627282930313233343536373839patch功能：patch 命令用于修补文件。补充说明： patch指令让用户利用设置修补文件的方式，修改，更新原始文件。倘若一次仅修改一个文件，可直接在指令列中下达指令依序执行。 如果配合修补文件的方式则能一次修补大批文件，这也是Linux系统核心的升级方法之一。语法：patch [-bceEflnNRstTuvZ][-B &lt;备份字首字符串&gt;][-d &lt;工作目录&gt;][-D &lt;标示符号&gt;][-F &lt;监别列数&gt;][-g &lt;控制数值&gt;][-i &lt;修补文件&gt;][-o &lt;输出文件&gt;][-p &lt;剥离层级&gt;][-r &lt;拒绝文件&gt;][-V &lt;备份方式&gt;][-Y &lt;备份字首字符串&gt;][-z &lt;备份字尾字符串&gt;][--backup-if -mismatch][--binary][--help][--nobackup-if-mismatch][--verbose][原始文件 &lt;修补文件&gt;] 或 path [-p &lt;剥离层级&gt;] &lt; [修补文件]参数说明： -b 或 --backup：备份每一个原始文件。 -B&lt;备份字首字符串&gt; 或 --prefix=&lt;备份字首字符串&gt;：设置文件备份时，附加在文件名称前面的字首字符串，该字符串可以是路径名称。 -c 或 --context：把修补数据解译成关联性的差异。 -d&lt;工作目录&gt; 或 --directory=&lt;工作目录&gt;：设置工作目录。 -D&lt;标示符号&gt; 或 --ifdef=&lt;标示符号&gt;：用指定的符号把改变的地方标示出来。 -e 或 --ed：把修补数据解译成ed指令可用的叙述文件。 -E 或 --remove-empty-files：若修补过后输出的文件其内容是一片空白，则移除该文件。 -f 或 --force：此参数的效果和指定"-t"参数类似，但会假设修补数据的版本为新版本。 -F&lt;监别列数&gt; 或 --fuzz&lt;监别列数&gt;：设置监别列数的最大值。 -g&lt;控制数值&gt; 或 --get=&lt;控制数值&gt;：设置以RSC或SCCS控制修补作业。 -i&lt;修补文件&gt; 或 --input=&lt;修补文件&gt;：读取指定的修补问家你。 -l 或 --ignore-whitespace：忽略修补数据与输入数据的跳格，空格字符。 -n 或 --normal：把修补数据解译成一般性的差异。 -N 或 --forward：忽略修补的数据较原始文件的版本更旧，或该版本的修补数据已使 用过。 -o&lt;输出文件&gt; 或 --output=&lt;输出文件&gt;：设置输出文件的名称，修补过的文件会以该名称存放。 -p&lt;剥离层级&gt; 或 --strip=&lt;剥离层级&gt;：设置欲剥离几层路径名称。 -f&lt;拒绝文件&gt; 或 --reject-file=&lt;拒绝文件&gt;：设置保存拒绝修补相关信息的文件名称，预设的文件名称为.rej。 -R 或 --reverse：假设修补数据是由新旧文件交换位置而产生。 -s 或 --quiet 或 --silent：不显示指令执行过程，除非发生错误。 -t 或 --batch：自动略过错误，不询问任何问题。 -T 或 --set-time：此参数的效果和指定"-Z"参数类似，但以本地时间为主。 -u 或 --unified：把修补数据解译成一致化的差异。 -v 或 --version：显示版本信息。 -V&lt;备份方式&gt; 或 --version-control=&lt;备份方式&gt;：用"-b"参数备份目标文件后，备份文件的字尾会被加上一个备份字符串，这个字符串不仅可用"-z"参数变更，当使用"-V"参数指定不同备份方式时，也会产生不同字尾的备份字符串。 -Y&lt;备份字首字符串&gt; 或 --basename-prefix=--&lt;备份字首字符串&gt;：设置文件备份时，附加在文件基本名称开头的字首字符串。 -z&lt;备份字尾字符串&gt; 或 --suffix=&lt;备份字尾字符串&gt;：此参数的效果和指定"-B"参数类似，差别在于修补作业使用的路径与文件名若为src/linux/fs/super.c，加上"backup/"字符串后，文件super.c会备份于/src/linux/fs/backup目录里。 -Z 或 --set-utc：把修补过的文件更改，存取时间设为UTC。 --backup-if-mismatch：在修补数据不完全吻合，且没有刻意指定要备份文件时，才备份文件。 --binary：以二进制模式读写数据，而不通过标准输出设备。 --help：在线帮助。 --nobackup-if-mismatch：在修补数据不完全吻合，且没有刻意指定要备份文件时，不要备份文件。 --verbose：详细显示指令的执行过程。 1234567rcp (macos中不存在)功能：rcp 命令用于复制远程文件或目录。补充说明：rcp指令用在远端复制文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则它会把前面指定的所有文件或目录复制到该目录中。语法：rcp [-pr][源文件或目录][目标文件或目录] 或 rcp [-pr][源文件或目录...][目标文件]参数说明： -p：保留源文件或目录的属性，包括拥有者，所属群组，权限与时间。 -r：递归处理，将指定目录下的文件与子目录一并处理。 12345678rm功能：rm 命令用于删除一个文件或者目录。补充说明：删除文件可以直接使用rm命令，若删除目录则必须配合选项"-r"。语法：rm [options] name...参数说明：(macos中参数比下面多几个，可执行man rm查看) -i：删除前逐一询问确认。 -f：即使原档案属性设为唯读，亦直接删除，无需逐一确认。 -r：将目录及以下之档案亦逐一删除。 123456789slocate (macos中不存在)功能：slocate 命令查找文件或目录。补充说明：slocate本身具有一个数据库，里面存放了系统中文件与目录的相关信息。语法：slocate [-u][--help][--version][-d &lt;目录&gt;][查找的文件]参数说明： -d&lt;目录&gt; 或 --database=&lt;目录&gt;：指定数据库所在的目录。 -u：更新slocate数据库。 --help：显示帮助。 --version：显示版本信息。 1234567891011split功能：split 命令用于将一个文件分割成数个。补充说明：该指令将大文件分割成较小的文件，在默认情况下将按照每1000行切割成一个小文件。语法：split [--help][--version][-&lt;行数&gt;][-b &lt;字节&gt;][-C &lt;字节&gt;][-l &lt;行数&gt;][要切割的文件][输出文件名]参数说明： -&lt;行数&gt;：指定每多少行切成一个小文件。 -b&lt;字节&gt;：指定每多少字节切成一个小文件。 --help：在线帮助。--macos中不合法 --version：显示版本信息。--macos中不合法 -C&lt;字节&gt;：与参数"-b"相似，但是在切 割时将尽量维持每行的完整性。 [输出文件名]：设置切割后文件的前置文件名， split会自动在前置文件名后再加上编号。 123456789tee功能：tee 命令用于读取标准输入的数据，并将其内容输出成文件。补充说明：tee指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。语法：tee [-ai][--help][--version][文件...]参数说明： -a 或 --append：附加到既有文件的后面，而非覆盖它。 -i 或 --ignore-interrupts：忽略中断信号。 --help：在线帮助。--macos中不合法 --version：显示版本信息。--macos中不合法 12345678910tmpwatch (macos中不存在)功能：tmpwatch 命令用于删除暂存文件。补充说明：执行tmpwatch指令可删除不必要的暂存文件，您可以设置文件超期时间，单位以小时计算。语法：tmpwatch [-afqv][--test][超期时间][目录...]参数说明： -a 或 --all：删除任何类型的文件。 -f 或 --force：强制删除文件或目录，其效果类似rm指令的"-f"参数。 -q 或 --quiet：不显示指令执行过程。 -v 或 --verbose：详细显示指令执行过程。 -test：仅作测试，并不真的删除文件或目录。 123456789101112131415touch功能：touch 命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。补充说明：若文件不存在，系统会建立一个新的文件。ls -l 可以显示档案的时间记录。语法：touch [-acfm][-d&lt;日期时间&gt;][-r&lt;参考文件或目录&gt;] [-t&lt;日期时间&gt;][--help][--version][文件或目录…]参数说明： a：改变档案的读取时间记录。 m：改变档案的修改时间记录。 c：假如目的档案不存在，不会建立新的档案。与 --no-create 的效果一样。 f：不使用，是为了与其他 unix 系统的相容性而保留。 r：使用参考档的时间记录，与 --file 的效果一样。 d：设定时间与日期，可以使用各种不同的格式。 t：设定档案的时间记录，格式与 date 指令相同。 --no-create：不会建立新档案。--macos中不合法 --help：列出指令格式。--macos中不合法 --version：列出版本讯息。--macos中不合法 123456umask功能：umask 命令指定在建立文件时预设的权限掩码。补充说明：umask可用来设定[权限掩码]。[权限掩码]是由3个八进制的数字所组成，将现有的存取权限减掉权限掩码后，即可产生建立文件时预设的权限。语法：umask [-S][权限掩码]参数说明：(macos中具体参数貌似不一样，可执行man umask查看) -S：以文字的方式来表示权限掩码。 123456789which功能：which 命令用于查找文件。补充说明：which指令会在环境变量$PATH设置的目录里查找符合条件的文件。语法：which [文件...]参数说明：(macos中参数不一样，可执行man which查看) -n&lt;文件名长度&gt;：指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。--macos中无效 -p&lt;文件名长度&gt;：与-n参数相同，但此处的&lt;文件名长度&gt;包括了文件的路径。 -w：指定输出时栏位的宽度。 -V：显示版本信息。--macos中无效 1234567891011cp功能：cp 命令主要用于复制文件或目录。语法：cp [options] source dest 或 cp [options] source... directory参数说明： -a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。 -d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。 -f：覆盖已经存在的目标文件而不给出提示。 -i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答"y"时目标文件将被覆盖。 -p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。 -r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。 -l：不复制文件，只是生成链接文件。 123456789101112131415whereis功能：whereis 命令用于查找文件。补充说明： 该指令会在特定目录中查找符合条件的文件。这些文件应属于原始代码、二进制文件，或是帮助文件。 该指令只能用于查找二进制文件、源代码文件和man手册页，一般文件的定位需使用locate命令。语法：whereis [-bfmsu][-B &lt;目录&gt;...][-M &lt;目录&gt;...][-S &lt;目录&gt;...][文件...]参数说明：(macos中以下参数都不合法) -b：只查找二进制文件。 -B&lt;目录&gt;：只在设置的目录下查找二进制文件。 -f：不显示文件名前的路径名称。 -m：只查找说明文件。 -M&lt;目录&gt;：只在设置的目录下查找说明文件。 -s：只查找原始代码文件。 -S&lt;目录&gt;：只在设置的目录下查找原始代码文件。 -u：查找不包含指定类型的文件。 123456789101112131415mcopy (macos中不存在)功能：mcopy 命令用来复制 MS-DOS 格式文件到 Linux 中，或是由 Linux 中复制 MS-DOS 文件到磁片上。补充说明： mcopy可复制单一的文件到所指定的文件名称，或是复制数个文件到所指定的目录之中。来源与目的文件可为 MS-DOS 或是 Linux 文件。 mcopy指令是一种mtools工具指令，可以在DOS系统中复制文件或者在DOS与Linux操作系统之间进行文件复制。语法：mcopy [-bnmpQt/][源文件][目标文件或目录]参数： b：批处理模式。这是为大量的文件复制进行最佳化的选项,但是当在复制文件过程中产生 crash 时，会有安全性的问题产生。 /：递回的复制。包含目录所含文件与其下所有子目录中的文件。 -n：覆盖其他文件时，不需要进行确认而直接覆盖。 m：将源文件修改时间设置为目标文件的修改时间。 p：将源文件的属性设置为目标文件的属性。 Q：当复制多个文件产生错误时，尽快结束程序。 t：转换为文本文件。 o：在覆盖 MS-DOS 文件时不会出现警示讯息。 123456mshowfat (macos中不存在)功能：mshowfat 命令用于显示MS-DOS文件在FAT中的记录。补充说明：mshowfat为mtools工具指令，可显示MS-DOS文件在FAT中的记录编号。语法：mshowfat [文件...]参数说明： [文件…]：执行操作的文件相对路径或者绝对路径。 123456rhmask (macos中不存在)功能：rhmask 命令用于对文件进行加密和解密操作。补充说明：执行rhmask指令可制作加密过的文件，方便用户在公开的网络上传输该文件，而不至于被任意盗用。语法：rhmask [加密文件][输出文件] 或 rhmask [-d][加密文件][源文件][输出文件]参数说明： -d：产生加密过的文件。 1234567891011121314151617181920212223scp功能：scp 命令用于Linux之间复制文件和目录。补充说明：scp是secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。语法：scp [-1246BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file] [-l limit] [-o ssh_option] [-P port] [-S program] [[user@]host1:]file1 [...] [[user@]host2:]file2简易写法：scp [可选参数] file_source file_target参数说明： -1：强制scp命令使用协议ssh1。 -2：强制scp命令使用协议ssh2。 -4：强制scp命令只使用IPv4寻址。 -6：强制scp命令只使用IPv6寻址。 -B：使用批处理模式。（传输过程中不询问传输口令或短语） -C：允许压缩。（将-C标志传递给ssh，从而打开压缩功能） -p：保留原文件的修改时间，访问时间和访问权限。 -q：不显示传输进度条。 -r：递归复制整个目录。 -v：详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。 -c cipher：以cipher将数据传输进行加密，这个选项将直接传递给ssh。 -F ssh_config：指定一个替代的ssh配置文件，此参数直接传递给ssh。 -i identity_file：从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。 -l limit：限定用户所能使用的带宽，以Kbit/s为单位。 -o ssh_option：如果习惯于使用ssh_config(5)中的参数传递方式。 -P port：注意是大写的P, port是指定数据传输用到的端口号。 -S program：指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。 123456789101112131415161718AWK功能：AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。补充说明：之所以叫AWK是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的Family Name的首字符。语法：awk [选项参数] 'script' var=value file(s) 或 awk [选项参数] -f scriptfile var=value file(s)参数说明： -F fs or --field-separator fs：指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。 -v va=value or --asign var=value：赋值一个用户定义变量。 -f scripfile or --file scriptfile：从脚本文件中读取awk命令。 -mf nnn and -mr nnn：对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。 -W compact or --compat, -W traditional or --traditional：在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。 -W copyleft or --copyleft, -W copyright or --copyright：打印简短的版权信息。 -W help or --help, -W usage or --usage：打印全部awk选项和每个选项的简短说明。 -W lint or --lint：打印不能向传统unix平台移植的结构的警告。 -W lint-old or --lint-old：打印关于不能向传统unix平台移植的结构的警告。 -W posix：打开兼容模式。但有以下限制，不识别：/x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符**和**=不能代替^和^=；fflush无效。 -W re-interval or --re-inerval：允许间隔正则表达式的使用，参考(grep中的Posix字符类)，如括号表达式[[:alpha:]]。 -W source program-text or --source program-text：使用program-text作为源代码，可与-f命令混用。 -W version or --version：打印bug报告信息的版本。 文档编辑123456789col功能：col 命令用于过滤控制字符。补充说明：在许多UNIX说明文件里，都有RLF控制字符。当我们运用shell特殊字符"&gt;"和"&gt;&gt;"，把说明文件的内容输出成纯文本文件时，控制字符会变成乱码，col指令则能有效滤除这些控制字符。语法：col [-bfx][-l&lt;缓冲区列数&gt;]参数说明： -b：过滤掉所有的控制字符，包括RLF和HRLF。 -f：滤除RLF字符，但允许将HRLF字符呈现出来。 -x：以多个空格字符来表示跳格字符。 -l&lt;缓冲区列数&gt;：预设的内存缓冲区有128列，您可以自行指定缓冲区的大小。 1234colrm功能：colrm 命令用于滤掉指定的行。补充说明：colrm指令从标准输入设备读取输入，转而输出到标准输出设备。如果不加任何参数，则该指令不会过滤任何一行。语法：colrm [开始行数编号&lt;结束行数编号&gt;] 123456789101112131415comm功能：comm 命令用于比较两个已排过序的文件。补充说明： 这项指令会一列列地比较两个已排序文件的差异，并将其结果显示出来，如果没有指定任何参数，则会把结果分成3行显示： 第1行仅是在第1个文件中出现过的列， 第2行是仅在第2个文件中出现过的列， 第3行则是在第1与第2个文件里都出现过的列。 若给予的文件名称为"-"，则comm指令会从标准输入设备读取数据。语法：comm [-123][--help][--version][第1个文件][第2个文件]参数说明： -1：不显示只在第1个文件里出现过的列。 -2：不显示只在第2个文件里出现过的列。 -3：不显示只在第1和第2个文件里出现过的列。 --help：在线帮助。--macos中不合法 --version：显示版本信息。--macos中不合法 12345678910111213csplit功能：csplit 命令用于分割文件。补充说明：将文件依照指定的范本样式予以切割后，分别保存成名称为xx00,xx01,xx02...的文件。若给予的文件名称为"-"，则csplit指令会从标准输入设备读取数据。语法：csplit [-kqsz][-b&lt;输出格式&gt;][-f&lt;输出字首字符串&gt;][-n&lt;输出文件名位数&gt;][--help][--version][文件][范本样式...]参数说明： -b&lt;输出格式&gt; 或 --suffix-format=&lt;输出格式&gt;：预设的输出格式其文件名称为xx00,xx01...等，您可以通过改变&lt;输出格式&gt;来改变输出的文件名。 -f&lt;输出字首字符串&gt; 或 --prefix=&lt;输出字首字符串&gt;：预设的输出字首字符串其文件名为xx00,xx01...等，如果你指定输出字首字符串为"hello"，则输出的文件名称会变成hello00,hello01...等。 -k 或 --keep-files：保留文件，就算发生错误或中断执行，也不能删除已经输出保存的文件。 -n&lt;输出文件名位数&gt; 或 --digits=&lt;输出文件名位数&gt;：预设的输出文件名位数其文件名称为xx00,xx01...等，如果你指定输出文件名位数为"3"，则输出的文件名称会变成xx000,xx001...等。 -q 或 -s 或 --quiet 或 --silent：不显示指令执行过程。 -z 或 --elide-empty-files：删除长度为0 Byte文件。 --help：在线帮助。--macos中不合法 --version：显示版本信息。--macos中不合法 123456789101112ed功能：ed 命令是文本编辑器，用于文本编辑。补充说明： ed是Linux中功能最简单的文本编辑程序，一次仅能编辑一行而非全屏幕方式的操作。 ed命令并不是一个常用的命令，一般使用比较多的是vi指令。但ed文本编辑器对于编辑大文件或对于在shell脚本程序中进行文本编辑很有用。语法：ed [-][-Gs][-p&lt;字符串&gt;][--help][--version][文件]参数说明： -G 或 --traditional：提供回兼容的功能。 -p&lt;字符串&gt;：指定ed在command mode的提示字符。 -s, -, --quiet 或 --silent：不执行开启文件时的检查功能。 --help：显示帮助。--macos中不合法 --version：显示版本信息。--macos中不合法 12345678910egrep功能：egrep 命令用于在文件内查找指定的字符串。补充说明： egrep执行效果与"grep-E"相似，使用的语法及参数可参照grep指令，与grep的不同点在于解读字符串的方法。 egrep是用extended regular expression语法来解读的，而grep则用basic regular expression 语法解读， extended regular expression比basic regular expression的表达更规范。语法：egrep [范本模式] [文件或目录]参数说明： [范本模式]：查找的字符串规则。 [文件或目录]：查找的目标文件或目录。 123456789101112131415161718ex功能：ex 命令用于在Ex模式下启动vim文本编辑器。补充说明：ex执行效果如同vi -E，使用语法及参数可参照vi指令，如要从Ex模式回到普通模式，则在vim中输入":vi"或":visual"指令即可。语法：ex [选项][参数]参数说明： +数字：从文件指定的数字行开始显示。 -b：使用二进制模式编辑文件。 -c 指令：编辑完第一个文件后执行指定的指令。 -d：编辑多个文件时，显示差异部分。 -m：不允许修改文件。 -n：不使用缓存。 -oN：其中 N 为数字。 -r：列出缓存，并显示恢复信息。 -R：以只读的方式打开文件。 -s：不显示任何错误信息。 -V：显示指令的详细执行过程。 --help：显示帮助信息。 --version：显示版本信息。 1234fgrep功能：fgrep 命令用于查找文件里符合条件的字符串。补充说明：fgrep指令相当于执行grep指令加上参数"-F"，详见grep命名说明。语法：fgrep [范本样式][文件或目录...] 12345678910111213fmt功能：fmt 命令用于编排文本文件。补充说明：fmt指令会从指定的文件里读取内容，将其依照指定格式重新编排后，输出到标准输出设备。若指定的文件名为"-"，则fmt指令会从标准输入设备读取数据。语法：fmt [-cstu][-p&lt;列起始字符串&gt;][-w&lt;每列字符数&gt;][--help][--version][文件...]参数说明： -c 或 --crown-margin：每段前两列缩排。 -p&lt;列起始字符串&gt; 或 -prefix=&lt;列起始字符串&gt;：仅合并含有指定字符串的列，通常运用在程序语言的注解方面。 -s 或 --split-only：只拆开字数超出每列字符数的列，但不合并字数不足每列字符数的列。 -t 或 --tagged-paragraph：每列前两列缩排，但第1列和第2列的缩排格式不同。 -u 或 --uniform-spacing：每个字符之间都以一个空格字符间隔，每个句子之间则两个空格字符分隔。 -w&lt;每列字符数&gt; 或 --width=&lt;每列字符数&gt; 或 -&lt;每列字符数&gt;：设置每列的最大字符数。 --help：在线帮助。--macos中不合法 --version：显示版本信息。--macos中不合法 123456789101112fold功能：fold 命令用于限制文件列宽。补充说明： fold指令会从指定的文件里读取内容，将超过限定列宽的列加入增列字符后，输出到标准输出设备。 若不指定任何文件名称，或是所给予的文件名为"-"，则fold指令会从标准输入设备读取数据。语法：fold [-bs][-w&lt;每列行数&gt;][--help][--version][文件...]参数说明： -b 或 --bytes：以Byte为单位计算列宽，而非采用行数编号为单位。 -s 或 --spaces：以空格字符作为换列点。 -w&lt;每列行数&gt; 或 --width&lt;每列行数&gt;：设置每列的最大行数。 --help：在线帮助。--macos中不合法 --version：显示版本信息。--macos中不合法 12345678910111213141516171819202122232425262728293031323334grep功能：grep 命令用于查找文件里符合条件的字符串。补充说明： grep指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设grep指令会把含有范本样式的那一列显示出来。 若不指定任何文件名称，或是所给予的文件名为"-"，则grep指令会从标准输入设备读取数据。语法：grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][--help][范本样式][文件或目录...]参数说明： -a 或 --text：不要忽略二进制的数据。 -A&lt;显示列数&gt; 或 --after-context=&lt;显示列数&gt;：除了显示符合范本样式的那一列之外，并显示该列之后的内容。 -b 或 --byte-offset：在显示符合范本样式的那一列之前，标示出该列第一个字符的位编号。 -B&lt;显示列数&gt; 或 --before-context=&lt;显示列数&gt;：除了显示符合范本样式的那一列之外，并显示该列之前的内容。 -c 或 --count：计算符合范本样式的列数。 -C&lt;显示列数&gt; 或 --context=&lt;显示列数&gt; 或 -&lt;显示列数&gt;：除了显示符合范本样式的那一列之外，并显示该列之前后的内容。 -d&lt;进行动作&gt; 或 --directories=&lt;进行动作&gt;：当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。 -e&lt;范本样式&gt; 或 --regexp=&lt;范本样式&gt;：指定字符串做为查找文件内容的范本样式。 -E 或 --extended-regexp：将范本样式为延伸的普通表示法来使用。 -f&lt;范本文件&gt; 或 --file=&lt;范本文件&gt;：指定范本文件，其内容含有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每列一个范本样式。 -F 或 --fixed-regexp：将范本样式视为固定字符串的列表。 -G 或 --basic-regexp：将范本样式视为普通的表示法来使用。 -h 或 --no-filename：在显示符合范本样式的那一列之前，不标示该列所属的文件名称。 -H 或 --with-filename：在显示符合范本样式的那一列之前，表示该列所属的文件名称。 -i 或 --ignore-case：忽略字符大小写的差别。 -l 或 --file-with-matches：列出文件内容符合指定的范本样式的文件名称。 -L 或 --files-without-match：列出文件内容不符合指定的范本样式的文件名称。 -n 或 --line-number：在显示符合范本样式的那一列之前，标示出该列的列数编号。 -q 或 --quiet或--silent：不显示任何信息。 -r 或 --recursive：此参数的效果和指定"-d recurse"参数相同。 -s 或 --no-messages：不显示错误信息。 -v 或 --revert-match：反转查找。 -V 或 --version：显示版本信息。 -w 或 --word-regexp：只显示全字符合的列。 -x 或 --line-regexp：只显示全列符合的列。 -y：此参数的效果和指定"-i"参数相同。 --help：在线帮助。 123456789101112131415161718192021222324252627ispell (macos中不存在)功能：ispell 命令用于拼写检查程序。补充说明： ispell预设会使用/usr/lib/ispell/english.hash字典文件来检查文本文件。 若在检查的文件中找到字典没有的词汇，ispell会建议使用的词汇，或是让你将新的词汇加入个人字典。语法：ispell [-aAbBClmMnNPStVx][-d&lt;字典文件&gt;][-L&lt;行数&gt;][-p&lt;字典文件&gt;][-w&lt;非字母字符&gt;][-W&lt;字符串长度&gt;][要检查的文件]参数说明： -a：当其他程序输出送到ispell时，必须使用此参数。 -A：读取到"&amp;Include File&amp;"字符串时，就去检查字符串后所指定文件的内容。 -b：产生备份文件，文件名为.bak。 -B：检查连字错误。 -C：不检查连字错误。 -d&lt;字典文件&gt;：指定字典文件。 -l：从标准输入设备读取字符串，结束后显示拼错的词汇。 -L&lt;行数&gt;：指定内文显示的行数。 -m：自动考虑字尾的变化。 -M：进入ispell后，在画面下方显示指令的按键。 -n：检查的文件为noff或troff的格式。 -N：进入ispell后，在画面下方不显示指令的按键。 -p&lt;字典文件&gt;：指定个人字典文件。 -P：不考虑字尾变化的情形。 -S：不排序建议取代的词汇。 -t：检查的文件为TeX或LaTeX的格式。 -V：非ANSI标准的字符会以"M-^"的方式来显示。 -w&lt;非字母字符&gt;：检查时，特别挑出含有指定的字符。 -W&lt;字符串长度&gt;：不检查指定长度的词汇。 -x：不要产生备份文件。 12345678910111213jed (macos中不存在)功能：jed 命令用于编辑文本文件。补充说明：Jed是以Slang所写成的程序，适合用来编辑程序原始代码。语法：jed [-2n][-batch][-f&lt;函数&gt;][-g&lt;行数&gt;][-i&lt;文件&gt;][-I&lt;文件&gt;][-s&lt;字符串&gt;][文件]参数说明： -2：显示上下两个编辑区。 -batch：以批处理模式来执行。 -f&lt;函数&gt;：执行Slang函数。 -g&lt;行数&gt;：移到缓冲区中指定的行数。 -i&lt;文件&gt;：将指定的文件载入缓冲区。 -i&lt;文件&gt;：载入Slang原始代码文件。 -n：不要载入jed.rc配置文件。 -s&lt;字符串&gt;：查找并移到指定的字符串。 123456789101112131415161718192021222324252627282930313233343536373839404142joe (macos中不存在)功能：joe 命令用于编辑文本文件。补充说明： Joe是一个功能强大的全屏幕文本编辑程序。操作的复杂度要比Pico高一点，但是功能较为齐全。 Joe一次可开启多个文件，每个文件各放在一个编辑区内，并可在文件之间执行剪贴的动作。语法：joe [-asis][-beep][-csmode][-dopadding][-exask][-force][-help][-keepup][-lightoff][-arking][-mid][-nobackups][-nonotice][-nosta][-noxon][-orphan][-backpath&lt;目录&gt;][-columns&lt;栏位&gt;][-lines&lt;行数&gt;][-pg&lt;行数&gt;][-skiptop&lt;行数&gt;][-autoindent crlf linums overwrite rdonly wordwrap][+&lt;行数&gt;][-indentc&lt;缩排字符&gt;][-istep&lt;缩排字符数&gt;][-keymap&lt;按键配置文件&gt;][-lmargin&lt;栏数&gt;][-rmargin&lt;栏数&gt;][-tab&lt;栏数&gt;][要编辑的文件]&lt;/p&gt;参数说明：程序参数： -asis：字符码超过127的字符不做任何处理。 -backpath&lt;目录&gt;：指定备份文件的目录。 -beep：编辑时，若有错误即发出哗声。 -columns&lt;栏位&gt;：设置栏数。 -csmode：可执行连续查找模式。 -dopadding：是程序跟tty间存在缓冲区。 -exask：在程序中，执行"Ctrl+k+x"时，会先确认是否要保存文件。 -force：强制在最后一行的结尾处加上换行符号。 -help：执行程序时一并显示帮助。 -keepup：在进入程序后，画面上方为状态列。 -lightoff：选取的区块在执行完区块命令后，就会回复成原来的状态。 -lines&lt;行数&gt;：设置行数。 -marking：在选取区块时，反白区块会随着光标移动。 -mid：当光标移出画面时，即自动卷页，使光标回到中央。 -nobackups：不建立备份文件。 -nonotice：程序执行时，不显示版权信息。 -nosta：程序执行时，不显示状态列。 -noxon：尝试取消"Ctrl+s"与"Ctrl+q"键的功能。 -orphan：若同时开启一个以上的文件，则其他文件会置于独立的缓冲区，而不会另外开启编辑区。 -pg&lt;行数&gt;：按"PageUp"或"PageDown"换页时，所要保留前一页的行数。 -skiptop&lt;行数&gt;：不使用屏幕上方指定的行数。文件参数： +&lt;行数&gt;：指定开启文件时，光标所在的行数。 -autoindent：自动缩排。 -crlf：在换行时，使用CR-LF字符。 -indentc&lt;缩排字符&gt;：执行缩排时，实际插入的字符。 -istep&lt;缩排字符数&gt;：每次执行缩排时，所移动的缩排字符数。 -keymap&lt;按键配置文件&gt;：使用不同的按键配置文件。 -linums：在每行前面加上行号。 -lmargin&lt;栏数&gt;：设置左侧边界。 -overwrite：设置覆盖模式。 -rmargin&lt;栏数&gt;：设置右侧边界。 -tab&lt;栏数&gt;：设置tab的宽度。 -rdonly：以只读的方式开启文件-wordwrap编辑时若超过右侧边界，则自动换行。 123456789101112131415join功能：join 命令用于将两个文件中，指定栏位内容相同的行连接起来。补充说明：找出两个文件中，指定栏位内容相同的行，并加以合并，再输出到标准输出设备。语法：join [-i][-a&lt;1或2&gt;][-e&lt;字符串&gt;][-o&lt;格式&gt;][-t&lt;字符&gt;][-v&lt;1或2&gt;][-1&lt;栏位&gt;][-2&lt;栏位&gt;][--help][--version][文件1][文件2]参数说明： -a&lt;1或2&gt;：除了显示原来的输出内容之外，还显示指令文件中没有相同栏位的行。 -e&lt;字符串&gt;：若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串。 -i 或 --igore-case：比较栏位内容时，忽略大小写的差异。 -o&lt;格式&gt;：按照指定的格式来显示结果。 -t&lt;字符&gt;：使用栏位的分隔字符。 -v&lt;1或2&gt;：跟-a相同，但是只显示文件中没有相同栏位的行。 -1&lt;栏位&gt;：连接[文件1]指定的栏位。 -2&lt;栏位&gt;：连接[文件2]指定的栏位。 --help：显示帮助。--macos中不合法 --version：显示版本信息。--macos中不合法 123456789look功能：look 命令用于查询单词。补充说明：look指令用于英文单词的查询。您仅需给予它欲查询的词首字符串，它会显示所有开头字符串符合该条件的单词。语法：look [-adf][-t&lt;字尾字符串&gt;][字首字符串][字典文件]参数说明： -a：使用另一个字典文件web2，该文件也位于/usr/dict目录下。 -d：只对比英文字母和数字，其余一慨忽略不予比对。 -f：忽略字符大小写差别。 -t&lt;字尾字符串&gt;：设置字尾字符串。 123456mtype (macos中不存在)功能：mtype 为mtools工具指令，模拟MS-DOS的type指令，可显示MS-DOS文件的内容。语法：mtype [-st][文件]参数说明： -s：去除8位字符码集的第一个位，使它兼容于7位的ASCII。 -t：将MS-DOS文本文件中的"换行+光标移至行首"字符转换成Linux的换行字符。 12345678910111213141516171819202122232425pico功能：pico 命令用于编辑文字文件。补充说明：pico是个简单易用、以显示导向为主的文字编辑程序，它伴随着处理电子邮件和新闻组的程序pine而来。语法：pico [-bdefghjkmqtvwxz][-n&lt;间隔秒数&gt;][-o&lt;工作目录&gt;][-r&lt;编辑页宽&gt;][-s&lt;拼字检查器&gt;][+&lt;列数编号&gt;][文件]参数说明： -b：开启置换的功能。 -d：开启删除的功能。 -e：使用完整的文件名称。 -f：支持键盘上的F1、F2...等功能键。 -g：显示光标。 -h：在线帮助。 -j：开启切换的功能。 -k：预设pico在使用剪下命令时，会把光标所在的列的内容全部删除。 -m：开启鼠标支持的功能，您可用鼠标点选命令列表。 -n&lt;间隔秒数&gt;：设置多久检查一次新邮件。 -o&lt;工作目录&gt;：设置工作目录。 -q：忽略预设值。 -r&lt;编辑页宽&gt;：设置编辑文件的页宽。 -s&lt;拼字检查器&gt;：另外指定拼字检查器。 -t：启动工具模式。 -v：启动阅读模式，用户只能观看，无法编辑文件的内容。 -w：关闭自动换行，通过这个参数可以编辑内容很长的列。 -x：关闭换面下方的命令列表。 -z：让pico可被Ctrl+z中断，暂存在后台作业里。 +&lt;列数编号&gt;：执行pico指令进入编辑模式时，从指定的列数开始编辑。 1234567891011121314151617181920212223rgrep (macos中不存在)功能：rgrep 命令用于递归查找文件里符合条件的字符串。补充说明：rgrep指令的功能和grep指令类似，可查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设rgrep指令会把含有范本样式的那一列显示出来。语法：rgrep [-?BcDFhHilnNrv][-R&lt;范本样式&gt;][-W&lt;列长度&gt;][-x&lt;扩展名&gt;][--help][--version][范本样式][文件或目录...]参说明数： -?：显示范本样式与范例的说明。 -B：忽略二进制的数据。 -c：计算符合范本样式的列数。 -D：排错模式，只列出指令搜寻的目录清单，而不会读取文件内容。 -F：当遇到符号连接时，rgrep预设是忽略不予处理，加上本参数后，rgrep指令就会读取该连接所指向的原始文件的内容。 -h：特别将符合范本样式的字符串标示出来。 -H：只列出符合范本样式的字符串，而非显示整列的内容。 -i：忽略字符大小写的差别。 -l：列出文件内容符合指定的范本样式的文件名称。 -n：在显示符合坊本样式的那一列之前，标示出该列的列数编号。 -N：不要递归处理。 -r：递归处理，将指定目录下的所有文件及子目录一并处理。 -R&lt;范本样式&gt;：此参数的效果和指定"-r"参数类似，但只主力符合范本样式文件名称的文件。 -v：反转查找。 -W&lt;列长度&gt;：限制符合范本样式的字符串所在列，必须拥有的字符数。 -x&lt;扩展名&gt;：只处理符合指定扩展名的文件名称的文件。 --help：在线帮助。 --version：显示版本信息。 1234567891011121314151617sed功能：sed 命令是利用script来处理文本文件。补充说明：sed可依照script的指令，来处理、编辑文本文件。sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。语法：sed [-hnV][-e&lt;script&gt;][-f&lt;script文件&gt;][文本文件]参数说明： -e&lt;script&gt; 或 --expression=&lt;script&gt;：以选项中指定的script来处理输入的文本文件。 -f&lt;script文件&gt; 或 --file=&lt;script文件&gt;：以选项中指定的script文件来处理输入的文本文件。 -h 或 --help：显示帮助。 -n 或 --quiet或--silent：仅显示script处理后的结果。 -V 或 --version：显示版本信息。操作说明： a：新增，a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～ c：取代，c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！ d：删除，因为是删除啊，所以 d 后面通常不接任何咚咚； i：插入，i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)； p：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～ s：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！ 12345678910111213141516171819sort功能：sort 命令用于将文本文件内容加以排序。补充说明：sort可针对文本文件的内容，以行为单位来排序。语法：sort [-bcdfimMnr][-o&lt;输出文件&gt;][-t&lt;分隔字符&gt;][+&lt;起始栏位&gt;-&lt;结束栏位&gt;][--help][--verison][文件]参数说明： -b：忽略每行前面开始出的空格字符。 -c：检查文件是否已经按照顺序排序。 -d：排序时，处理英文字母、数字及空格字符外，忽略其他的字符。 -f：排序时，将小写字母视为大写字母。 -i：排序时，除了040至176之间的ASCII字符外，忽略其他的字符。 -m：将几个排序好的文件进行合并。 -M：将前面3个字母依照月份的缩写进行排序。 -n：依照数值的大小排序。 -o&lt;输出文件&gt;：将排序后的结果存入指定的文件。 -r：以相反的顺序来排序。 -t&lt;分隔字符&gt;：指定排序时所用的栏位分隔字符。 +&lt;起始栏位&gt;-&lt;结束栏位&gt;：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。 --help：显示帮助。 --version：显示版本信息。 1234spell (macos中不存在)功能：spell 命令可建立拼写检查程序。补充说明：spell可从标准输入设备读取字符串，结束后显示拼错的词汇。语法：spell 12345678910111213141516171819202122232425262728293031323334353637tr功能：tr 命令用于转换或删除文件中的字符。补充说明：tr指令从标准输入设备读取数据，经过字符串转译后，将结果输出到标准输出设备。语法：tr [-cdst][--help][--version][第一字符集][第二字符集] 或 tr [OPTION]…SET1[SET2]参数说明： -c, --complement：反选设定字符。也就是符合 SET1 的部份不做处理，不符合的剩余部份才进行转换。 -d, --delete：删除指令字符。 -s, --squeeze-repeats：缩减连续重复的字符成指定的单个字符。 -t, --truncate-set1：削减 SET1 指定范围，使之与 SET2 设定长度相等。 --help：显示程序用法信息。--macos中不合法 --version：显示程序本身的版本信息。--macos中不合法字符集合的范围： \NNN 八进制值的字符 NNN (1 to 3 为八进制值的字符) \\ 反斜杠 \a Ctrl-G 铃声 \b Ctrl-H 退格符 \f Ctrl-L 走行换页 \n Ctrl-J 新行 \r Ctrl-M 回车 \t Ctrl-I tab键 \v Ctrl-X 水平制表符 CHAR1-CHAR2：字符范围从 CHAR1 到 CHAR2 的指定，范围的指定以 ASCII 码的次序为基础，只能由小到大，不能由大到小 [CHAR*]：这是 SET2 专用的设定，功能是重复指定的字符到与 SET1 相同长度为止 [CHAR*REPEAT]：这也是 SET2 专用的设定，功能是重复指定的字符到设定的 REPEAT 次数为止(REPEAT 的数字采 8 进位制计算，以 0 为开始) [:alnum:]：所有字母字符与数字 [:alpha:]：所有字母字符 [:blank:]：所有水平空格 [:cntrl:]：所有控制字符 [:digit:]：所有数字 [:graph:]：所有可打印的字符(不包含空格符) [:lower:]：所有小写字母 [:print:]：所有可打印的字符(包含空格符) [:punct:]：所有标点字符 [:space:]：所有水平与垂直空格符 [:upper:]：所有大写字母 [:xdigit:]：所有 16 进位制的数字 [=CHAR=]：所有符合指定的字符(等号里的 CHAR，代表你可自订的字符) 12345678expr功能：expr 命令是一个手工命令行计数器。补充说明：expr用于在UNIX/LINUX下求表达式变量的值，一般用于整数值，也可用于字符串。语法：expr 表达式表达式说明: 用空格隔开每个项。 用 / (反斜杠) 放在 shell 特定的字符前面。 对包含空格和其他特殊字符的字符串要用引号括起来。 123456789101112131415uniq功能：uniq 命令用于检查及删除文本文件中重复出现的行列。补充说明：uniq可检查文本文件中重复出现的行列。语法：uniq [-cdu][-f&lt;栏位&gt;][-s&lt;字符位置&gt;][-w&lt;字符位置&gt;][--help][--version][输入文件][输出文件]参数说明： -c 或 --count：在每列旁边显示该行重复出现的次数。 -d 或 --repeated：仅显示重复出现的行列。 -f&lt;栏位&gt; 或 --skip-fields=&lt;栏位&gt;：忽略比较指定的栏位。 -s&lt;字符位置&gt; 或 --skip-chars=&lt;字符位置&gt;：忽略比较指定的字符。 -u 或 --unique：仅显示出一次的行列。 -w&lt;字符位置&gt; 或 --check-chars=&lt;字符位置&gt;：指定要比较的字符。 --help：显示帮助。--macos中不合法 --version：显示版本信息。--macos中不合法 [输入文件]：指定已排序好的文本文件。 [输出文件]：指定输出的文件。 12345678910wc功能：wc 命令用于计算字数。补充说明：利用wc指令我们可以计算文件的Byte数、字数、或是列数，若不指定文件名称、或是所给予的文件名为"-"，则wc指令会从标准输入设备读取数据。语法：wc [-clw][--help][--version][文件...]参数说明： -c 或 --bytes 或 --chars：只显示Bytes数。 -l 或 --lines：只显示列数。 -w 或 --words：只显示字数。 --help：在线帮助。--macos中不合法 --version：显示版本信息。--macos中不合法 123456let (macos中可以使用，但无法使用man let查看该命令的使用手册)功能：let 命令是 BASH 中用于计算的工具，用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量。补充说明：如果表达式中包含了空格或其他特殊字符，则必须引起来。语法：let arg [arg ...]参数说明： arg：要执行的表达式。 文件传输1234567lprm功能：lprm 命令用于将一个工作从打印机贮列中移除。补充说明： 尚未完成的打印机工作会被放在打印机贮列之中，这个命令可用来将常未送到打印机的工作取消。 由于每一个打印机都有一个独立的贮列，你可以用-P这个命令设定想要作用的印列机。如果没有设定的话，会使用系统预设的打印机。 这个命令会检查使用者是否有足够的权限删除指定的档案，一般而言，只有档案的拥有者或是系统管理员才有这个权限。语法：lprm [P] [file...] 123456lpr功能：lpr (line printer，按行打印) 实用程序用来将一个或多个文件放入打印队列等待打印。补充说明：lpr可以用来将料资送给本地或是远端的主机来处理。语法：lpr [ -P printer ]参数说明： -p Printer：将资料送至指定的打印机 Printer，预设值为 lp。 123456lpq功能：lpq 命令用于查看一个打印队列的状态，该程序可以查看打印机队列状态及其所包含的打印任务。语法：lpq [l] [P] [user]参数说明： -P：指定一个打印机，否则使用默认打印机或环境变量PRINTER指定的打印机。 -l：打印组成作业的所有文件的信息。 12345678910lpd (macos中不存在)功能：lpd 命令是一个常驻的打印机管理程序，它会根据 /etc/printcap 的内容来管理本地或远端的打印机。补充说明： /etc/printcap中定义的每一个打印机必须在/var/lpd中有一个相对应的目录，目录中以cf开头的档案表示一个等待送到适当装置的印表工作。 这个档案通常是由lpr所产生。lpr和lpd组成了一个可以离线工作的系统，当你使用lpr时，打印机不需要能立即可用，甚至不用存在。 lpd会自动监视打印机的状况，当打印机上线后，便立即将档案送交处理。这个得所有的应用程序不必等待打印机完成前一工作。语法：lpd [-l] [#port]参数说明： -l：将一些除错讯息显示在标准输出上。 #port：一般而言，lpd 会使用 getservbyname 取得适当的 TCP/IP port，你可以使用这个参数强迫 lpd 使用指定的 port。 1234bye (在macos zsh窗口中直接输入bye会关闭当前窗口)功能：bye 命令用于中断 FTP 连线并结束程序。补充说明：在ftp模式下，输入bye即可中断目前的连线作业，并结束ftp的执行。语法：bye 12345678910ftp功能：ftp 命令设置文件系统相关功能。补充说明：FTP是ARPANet的标准文件传输协议，该网络就是现今Internet的前身。语法：ftp [-dignv][主机名称或IP地址]参数参数： -d：详细显示指令执行过程，便于排错或分析程序执行的情形。 -i：关闭互动模式，不询问任何问题。 -g：关闭本地主机文件名称支持特殊字符的扩充特性。 -n：不使用自动登陆。 -v：显示指令执行过程。 123456uuto功能：uuto 命令将文件传送到远端的UUCP主机。补充说明：uuto为script文件，它实际上会执行uucp，用来将文件传送到远端UUCP主机，并在完成工作后，以邮件通知远端主机上的用户。语法：uuto [文件][目的]参数说明： 相关参数请参考 uucp 指令。 123456789uupick功能：uupick 命令处理传送进来的文件。补充说明：当其他主机通过UUCP将文件传送进来时，可利用uupick指令取出这些文件。语法：uupick [-v][-I&lt;配置文件&gt;][-s&lt;主机&gt;][-x&lt;层级&gt;][--help]参数说明： -I&lt;配置文件&gt; 或 --config&lt;配置文件&gt;：指定配置文件。 -s&lt;主机&gt; 或 --system&lt;主机&gt;：处理由指定主机传送过来的文件。 -v 或 --version：显示版本信息。 --help：显示帮助。 1234567891011121314151617181920212223uucp功能：uucp 命令用于在Unix系统之间传送文件。补充说明：UUCP为Unix系统之间，通过序列线来连线的协议。uucp使用UUCP协议，主要的功能为传送文件。语法：uucp [-cCdfjmrRtvW][-g&lt;等级&gt;][-I&lt;配置文件&gt;][-n&lt;用户&gt;][-x&lt;类型&gt;][--help][...来源][目的]参数说明： -c 或 --nocopy：不用将文件复制到缓冲区。 -C 或 --copy：将文件复制到缓冲区。 -d 或 --directiories：在传送文件时，自动在[目的]建立必要的目录。 -f 或 --nodirectiories：在传送文件时，若需要在[目的]建立目录，则放弃执行该作业。 -g&lt;等级&gt; 或 --grade&lt;等级&gt;：指定文件传送作业的优先顺序。 -I&lt;配置文件&gt; 或 --config&lt;配置文件&gt;：指定uucp配置文件。 -j 或 --jobid：显示作业编号。 -m 或 --mail：作业结束后，以电子邮件报告作业是否顺利完成。 -n&lt;用户&gt; 或 --notify&lt;用户&gt;：作业结束后，以电子邮件向指定的用户报告作业是否顺利完成。 -r 或 --nouucico：不要立即启动uucico服务程序，仅将作业送到队列中，待稍后再执行。 -R 或 --recursive：若[来源]为目录，则将整个目录包含子目录复制到[目的]。 -t 或 --uuto：将最后一个参数视为"主机名!用户"。 -v 或 --version：显示版本信息。 -W 或 --noexpand：不要将目前所在的目录加入路径。 -x&lt;类型&gt; 或 --debug&lt;类型&gt;：启动指定的排错模式。 --help：显示帮助。 [源...]：指定源文件或路径。 [目的]：指定目标文件或路径。 12345678910111213141516171819202122232425uucico功能：uucico 命令UUCP文件传输服务程序。补充说明： uucico是用来处理uucp或uux送到队列的文件传输工具。uucico有两种工作模式：主动模式和附属模式。 当在主动模式下时，uucico会调用远端主机；在附属模式下时，uucico则接受远端主机的调用。语法：uucico [-cCDefqvwz][-i&lt;类型&gt;][-I&lt;文件&gt;][-p&lt;连接端口号码&gt;][-][-rl][-s&lt;主机&gt;][-S&lt;主机&gt;][-u&lt;用户&gt;][-x&lt;类型&gt;][--help]参数说明： -c 或 --quiet：当不执行任何工作时，不要更改记录文件的内容及更新目前的状态。 -C 或 --ifwork：当有工作要执行时，才调用-s或-S参数所指定主机。 -D 或 --nodetach：不要与控制终端机离线。 -e 或 --loop：在附属模式下执行，并且出现要求登入的提示画面。 -f 或 --force：当执行错误时，不等待任何时间即重新调用主机。 -i&lt;类型&gt; 或 --stdin&lt;类型&gt;：当使用到标准输入设备时，指定连接端口的类型。 -I&lt;文件&gt; 或 --config&lt;文件&gt;：指定使用的配置文件。 -l 或 --prompt：出现要求登入的提示画面。 -p&lt;连接端口号码&gt; 或 -port&lt;连接端口号码&gt;：指定连接端口号码。 -q 或 --quiet：不要启动uuxqt服务程序。 -r0 或 --slave：以附属模式启动。 -s&lt;主机&gt; 或 --system&lt;主机&gt;：调用指定的主机。 -u&lt;用户&gt; 或 --login&lt;用户&gt;：指定登入的用户帐号，而不允许输入任意的登入帐号。 -v 或 --version：显示版本信息，并且结束程序。 -w 或 --wait：在主动模式下，当执行调用动作时，则出现要求登入的提示画面。 -x&lt;类型&gt; 或 -X&lt;类型&gt; 或 outgoing-debug&lt;类型&gt;：启动指定的排错模式。 -z 或 --try-next：当执行不成功时，尝试下一个选择而不结束程序。 --help：显示帮助，并且结束程序。 12345678910111213141516171819tftp功能：tftp 命令用于传输文件。补充说明：FTP让用户得以下载存放于远端主机的文件，也能将文件上传到远端主机放置。tftp是简单的文字模式ftp程序，它所使用的指令和FTP类似。语法：tftp [主机名称或IP地址]操作说明： connect：连接到远程tftp服务器。 mode：文件传输模式。 put：上传文件。 get：下载文件。 quit：退出。 verbose：显示详细的处理信息。 tarce：显示包路径。 status：显示当前状态信息。 binary：二进制传输模式。 ascii：ascii 传送模式。 rexmt：设置包传输的超时时间。 timeout：设置重传的超时时间。 help：帮助信息。 ?：帮助信息。--macos中无效 1234567891011121314ncftp (macos中不存在)功能：ncftp 命令用于传输文件。补充说明： FTP让用户得以下载存放于服务器主机的文件，也能将文件上传到远端主机放置。 NcFTP是文字模式FTP程序的佼佼者，它具备多样特色，包括显示传输速率，下载进度，自动续传，标住书签，可通过防火墙和代理服务器等。 当不指定用户名时，ncftp 命令会自动尝试使用匿名账户anonymous 去连接远程FTP 服 务器，不需要用户输入账号和密码。语法：ncftp [主机或IP地址]参数说明： -u&lt;用户名&gt;：指定登录FTP服务器的用户名 -p&lt;密码&gt;：设置用户密码 -P&lt;端口号&gt;：指定FTP端口号，默认为21 -j&lt;账号&gt;：指定账号 -h：帮助信息 -v：版本信息 1234567891011ftpshut (macos中不存在)功能：ftpshut 命令在指定的时间关闭FTP服务器。补充说明： 本指令提供系统管理者在设置的时间关闭FTP服务器，且能在关闭之前发出警告信息通知用户。 关闭时间若设置后为"none"，则会马上关闭服务器。如果采用"+30"的方式来设置表示服务器在30分钟之后关闭。 依次类推，假设使用"1130"的格式则代表服务器会在每日的11时30分关闭，时间格式为24小时制。 FTP服务器关闭后，在/etc目录下会产生一个名称为shutmsg的文件，把它删除后即可再度启动FTP服务器的功能。语法：ftpshut [-d&lt;分钟&gt;][-l&lt;分钟&gt;][关闭时间]["警告信息"]参数说明： -d&lt;分钟&gt;：切断所有FTP连线时间。 -l&lt;分钟&gt;：停止接受FTP登入的时间。 123456ftpwho (macos中不存在)功能：ftpwho 命令用于显示目前所有以FTP登入的用户信息。补充说明：执行这项指令可得知目前用FTP登入系统的用户有那些人，以及他们正在进行的操作。语法：ftpwho参数说明： -v：显示版本信息 1234567ftpcount (macos中不存在)功能：ftpcount 命令用于显示目前以FTP登入的用户人数。补充说明：执行这项指令可得知目前用FTP登入系统的人数以及FTP登入人数的上限。语法：ftpcount参数说明： -f&lt;设定文件&gt;：指定设定文件的路径。 -h 或 --help：显示帮助信息。 磁盘管理12345678cd功能：cd 命令用于切换当前工作目录至dirName(目录参数)。补充说明： 其中 dirName 表示法可为绝对路径或相对路径。若目录名称省略，则变换至使用者的 home 目录 (也就是刚 login 时所在的目录)。 另外，"~" 也表示为 home 目录 的意思，"." 则是表示目前所在的目录，".." 则表示目前目录位置的上一层目录。语法：cd [dirName]参数说明： dirName：要切换的目标目录。 123456789101112131415161718192021df功能：df 命令用于显示目前在Linux系统上的文件系统的磁盘使用情况统计。语法：df [选项]... [FILE]...参数说明： -a, --all：包含所有的具有 0 Blocks 的文件系统。 --block-size=&#123;SIZE&#125;：使用 &#123;SIZE&#125; 大小的 Blocks。 -h, --human-readable：使用人类可读的格式(预设值是不加这个选项的...)。 -H, --si：很像 -h, 但是用 1000 为单位而不是用 1024。 -i, --inodes：列出 inode 资讯，不列出已使用 block。 -k, --kilobytes：就像是 --block-size=1024。 -l, --local：限制列出的文件结构。 -m, --megabytes：就像 --block-size=1048576。 --no-sync：取得资讯前不 sync (预设值)。 -P, --portability：使用 POSIX 输出格式。 --sync：在取得资讯前 sync。 -t, --type=TYPE：限制列出文件系统的 TYPE。 -T, --print-type：显示文件系统的形式。 -x, --exclude-type=TYPE：限制列出文件系统不要显示 TYPE。 -v：(忽略)。 --help：显示这个帮手并且离开。--macos中无效 --version：输出版本资讯并且离开。--macos中无效 12345678dirs功能：dirs 命令用于显示目录记录。补充说明：显示目录堆叠中的记录。语法：dirs [+/-n -l]参数说明： +n：显示从左边算起第n笔的目录。 -n：显示从右边算起第n笔的目录。 -l：显示目录完整的记录。 1234567891011121314151617181920212223du功能：du 命令用于显示目录或文件的大小。补充说明：du会显示指定的目录或文件所占用的磁盘空间。语法：du [-abcDhHklmsSx][-L &lt;符号连接&gt;][-X &lt;文件&gt;][--block-size][--exclude=&lt;目录或文件&gt;][--max-depth=&lt;目录层数&gt;][--help][--version][目录或文件]参数说明： -a 或 -all：显示目录中个别文件的大小。 -b 或 -bytes：显示目录或文件大小时，以byte为单位。 -c 或 --total：除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。 -D 或 --dereference-args：显示指定符号连接的源文件大小。 -h 或 --human-readable：以K，M，G为单位，提高信息的可读性。 -H 或 --si：与-h参数相同，但是K，M，G是以1000为换算单位。 -k 或 --kilobytes：以1024 bytes为单位。 -l 或 --count-links：重复计算硬件连接的文件。 -L&lt;符号连接&gt; 或 --dereference&lt;符号连接&gt;：显示选项中所指定符号连接的源文件大小。 -m 或 --megabytes：以1MB为单位。 -s 或 --summarize：仅显示总计。 -S 或 --separate-dirs：显示个别目录的大小时，并不含其子目录的大小。 -x 或 --one-file-xystem：以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。 -X&lt;文件&gt; 或 --exclude-from=&lt;文件&gt;：在&lt;文件&gt;指定目录或文件。 --exclude=&lt;目录或文件&gt;：略过指定的目录或文件。--macos中无效 --max-depth=&lt;目录层数&gt;：超过指定层数的目录后，予以忽略。--macos中无效 --help：显示帮助。--macos中无效 --version：显示版本信息。--macos中无效 123456789edquota功能：edquota 命令用于编辑用户或群组的磁盘配额。补充说明：edquota预设会使用vi来编辑使用者或群组的磁盘配额设置。语法：edquota [-p &lt;源用户名称&gt;][-ug][用户或群组名称...] 或 edquota [-ug] -t参数说明： -u：设置用户的磁盘配额，这是预设的参数。 -g：设置群组的磁盘配额。 -p&lt;源用户名称&gt;：将源用户的磁盘配额设置套用至其他用户或群组。 -t：设置宽限期限。 1234567891011121314151617eject (macos中不存在)功能：eject 命令用于退出抽取式设备。补充说明：若设备已挂入，则eject会先将该设备卸除再退出。语法：eject [-dfhnqrstv][-a &lt;开关&gt;][-c &lt;光驱编号&gt;][设备]参数说明： [设备]：设备可以是驱动程序名称，也可以是挂入点。 -a&lt;开关&gt; 或 --auto&lt;开关&gt;：控制设备的自动退出功能。 -c&lt;光驱编号&gt; 或 --changerslut&lt;光驱编号&gt;：选择光驱柜中的光驱。 -d 或 --default：显示预设的设备，而不是实际执行动作。 -f 或 --floppy：退出抽取式磁盘。 -h 或 --help：显示帮助。 -n 或 --noop：显示指定的设备。 -q 或 --tape：退出磁带。 -r 或 --cdrom：退出光盘。 -s 或 --scsi：以SCSI指令来退出设备。 -t 或 --trayclose：关闭光盘的托盘。 -v 或 --verbose：执行时，显示详细的说明。 1234mcd (macos中不存在)功能：mcd 为mtools工具指令，可在MS-DOS文件系统中切换工作目录。补充说明：若不加任何参数，则显示目前所在的磁盘与工作目录。语法：mcd [msdosdirectory] 123456mdeltree (macos中不存在)功能：mdeltree 命令可用来删除 MSDOS 格式档案及目录。补充说明：mdeltree 会将所指定的目录与目录之下的所有档案与目录都删除掉。如果所指定的档案或目录不存在，则会传回错误讯息。语法：mdeltree [-v] msdosdirectory [msdosdirectories...]参数说明： -v：显示更多的信息。 1234567mdu (macos中不存在)功能：mdu 命令用于显示MS-DOS目录所占用的磁盘空间。补充说明：mdu为mstools工具指令，可显示MS-DOS文件系统中目录所占用的磁盘空间。语法：mdu [-as][目录]参数说明： -a：显示每个文件及整个目录所占用的空间。 -s：仅显示整个目录所占用的空间。 12345mkdir功能：mkdir 命令用于建立名称为 dirName 之子目录。语法：mkdir [-p] dirName参数说明： -p：确保目录名称存在，不存在的就建一个。 1234567891011mlabel (macos中不存在)功能：mlabel 命令用于设定磁盘的标签(Label)。补充说明： 如果磁盘上设定过标签，mlabel 会将他显示给使用者。 如果没有指定新标签并且没有指定 c 或 s 选项，mlabel 会提示使用者输入新的标签。 如果直接按下 Enter ，就会将原本的标签删除。语法：mlabel [-vcs] drive:[new_label]参数说明： -v：更多的讯息。 -c：清除原有的标签，不出现提示讯息。 -s：显示目前的标签，不出现提示讯息。 1234mmd (macos中不存在)功能：mmd 命令用于在MS-DOS文件系统中建立目录。补充说明：mmd为mtools工具指令，模拟MS-DOS的md指令，可在MS-DOS的文件系统中建立目录。语法：mmd [目录...] 1234mrd (macos中不存在)功能：mrd 命令用于删除MS-DOS文件系统中的目录。补充说明：mrd为mtools工具指令，模拟MS-DOS的rd指令，可删除MS-DOS的目录。语法：mrd [目录...] 12345678910111213mzip (macos中不存在)功能：mzip 命令是Zip/Jaz磁盘驱动器控制指令。补充说明：mzip为mtools工具指令，可设置Zip或Jaz磁盘驱动区的保护模式以及执行退出磁盘的动作。语法：mzip [-efpqruwx]参数说明： -e：退出磁盘。 -f：与-e参数一并使用，不管是否已经挂入磁盘中的文件系统，一律强制退出磁盘。 -p：设置磁盘的写入密码。 -q：显示目前的状态。 -r：将磁盘设为防写状态。 -u：退出磁盘以前，暂时解除磁盘的保护状态。 -w：将磁盘设为可写入状态。 -x：设置磁盘的密码。 1234567pwd功能：pwd 命令用于显示工作目录。补充说明：执行pwd指令可立刻得知您目前所在的工作目录的绝对路径名称。语法：pwd [--help][--version]参数说明： --help：在线帮助。--macos中无效(bad option) --version：显示版本信息。--macos中无效(bad option) 12345678910quota功能：quota 命令用于显示磁盘已使用的空间与限制。补充说明：执行quota指令，可查询磁盘空间的限制，并得知已使用多少空间。语法：quota [-quvV][用户名称...] 或 quota [-gqvV][群组名称...]参数说明： -g：列出群组的磁盘空间限制。 -q：简明列表，只列出超过限制的部分。 -u：列出用户的磁盘空间限制。 -v：显示该用户或群组，在所有挂入系统的存储设备的空间限制。 -V：显示版本信息。 1234567891011121314151617181920212223242526272829303132mount功能：mount 命令是经常会使用到的命令，它用于挂载Linux系统外的文件。语法： mount [-hV] mount -a [-fFnrsvw] [-t vfstype] mount [-fnrsvw] [-o options [,...]] device | dir mount [-fnrsvw] [-t vfstype] [-o options] device dir参数说明： -V：显示程序版本 -h：显示辅助讯息 -v：显示较讯息，通常和 -f 用来除错。 -a：将 /etc/fstab 中定义的所有档案系统挂上。 -F：这个命令通常和 -a 一起使用，它会为每一个 mount 的动作产生一个行程负责执行。在系统需要挂上大量 NFS 档案系统时可以加快挂上的动作。 -f：通常用在除错的用途。它会使 mount 并不执行实际挂上的动作，而是模拟整个挂上的过程。通常会和 -v 一起使用。 -n：一般而言，mount 在挂上后会在 /etc/mtab 中写入一笔资料。但在系统中没有可写入档案系统存在的情况下可以用这个选项取消这个动作。 -s-r：等于 -o ro -w：等于 -o rw -L：将含有特定标签的硬盘分割挂上。 -U：将档案分割序号为 的档案系统挂下。-L 和 -U 必须在/proc/partition 这种档案存在时才有意义。 -t：指定档案系统的型态，通常不必指定。mount 会自动选择正确的型态。 -o async：打开非同步模式，所有的档案读写动作都会用非同步模式执行。 -o sync：在同步模式下执行。 -o atime、-o noatime：当 atime 打开时，系统会在每次读取档案时更新档案的『上一次调用时间』。当我们使用 flash 档案系统时可能会选项把这个选项关闭以减少写入的次数。 -o auto、-o noauto：打开/关闭自动挂上模式。 -o defaults:使用预设的选项 rw, suid, dev, exec, auto, nouser, and async. -o dev、-o nodev-o exec、-o noexec允许执行档被执行。 -o suid、-o nosuid：允许执行档在 root 权限下执行。 -o user、-o nouser：使用者可以执行 mount/umount 的动作。 -o remount：将一个已经挂下的档案系统重新用不同的方式挂上。例如原先是唯读的系统，现在用可读写的模式重新挂上。 -o ro：用唯读模式挂上。 -o rw：用可读写模式挂上。 -o loop=：使用 loop 模式用来将一个档案当成硬盘分割挂上系统。 123456mmount (macos中不存在)功能：mmount 命令用于挂入MS-DOS文件系统。补充说明：mmount为mtools工具指令，可根据[mount参数]中的设置，将磁盘内容挂入到Linux目录中。语法：mmount [驱动器代号][mount参数]参数说明： [mount参数]：用法请参考 mount指令。 12345rmdir功能：rmdir 命令删除空的目录。语法：rmdir [-p] dirName参数说明： -p：是当子目录被删除后使它也成为空目录的话，则顺便一并删除。 1234rmt (macos中不存在)功能：rmt 命令通过进程间通信远程控制磁带机。补充说明：通过rmt指令，用户可通过IPC连线，远端操控磁带机的倾倒和还原操作。语法：rmt 1234stat功能：stat 命令用于显示inode内容。补充说明：stat以文字的格式来显示inode的内容。语法：stat [文件或目录] 12345678910111213141516171819202122232425tree (macos中不存在)功能：tree 命令用于以树状图列出目录的内容。补充说明：执行tree指令，它会列出指定目录下的所有文件，包括子目录里的文件。语法：tree [-aACdDfFgilnNpqstux][-I &lt;范本样式&gt;][-P &lt;范本样式&gt;][目录...]参数说明： -a：显示所有文件和目录。 -A：使用ASNI绘图字符显示树状图而非以ASCII字符组合。 -C：在文件和目录清单加上色彩，便于区分各种类型。 -d：显示目录名称而非内容。 -D：列出文件或目录的更改时间。 -f：在每个文件或目录之前，显示完整的相对路径名称。 -F：在执行文件，目录，Socket，符号连接，管道名称名称，各自加上"*","/","=","@","|"号。 -g：列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。 -i：不以阶梯状列出文件或目录名称。 -I&lt;范本样式&gt;：不显示符合范本样式的文件或目录名称。 -l：如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。 -n：不在文件和目录清单加上色彩。 -N：直接列出文件和目录名称，包括控制字符。 -p：列出权限标示。 -P&lt;范本样式&gt;：只显示符合范本样式的文件或目录名称。 -q：用"?"号取代控制字符，列出文件和目录名称。 -s：列出文件或目录大小。 -t：用文件和目录的更改时间排序。 -u：列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。 -x：将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。 12345678910111213umount功能：umount 命令用于卸除文件系统。补充说明：umount可卸除目前挂在Linux目录中的文件系统。语法：umount [-ahnrvV][-t &lt;文件系统类型&gt;][文件系统]参数说明： -a：卸除/etc/mtab中记录的所有文件系统。 -h：显示帮助。 -n：卸除时不要将信息存入/etc/mtab文件中。 -r：若无法成功卸除，则尝试以只读的方式重新挂入文件系统。 -t&lt;文件系统类型&gt;：仅卸除选项中所指定的文件系统。 -v：执行时显示详细的信息。 -V：显示版本信息。 [文件系统]：除了直接指定文件系统外，也可以用设备名称或挂入点来表示文件系统。 1234567891011ls功能：ls 命令用于显示指定工作目录下之内容(列出目前工作目录所含之文件及子目录)。语法：ls [-alrtAFR] [name...]参数说明： -a：显示所有文件及目录 (ls内定将文件名或目录名称开头为"."的视为隐藏档，不会列出)。 -l：除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出。 -r：将文件以相反次序显示(原定依英文字母次序)。 -t：将文件依建立时间之先后次序列出。 -A：同 -a ，但不列出 "." (目前目录) 及 ".." (父目录)。 -F：在列出的文件名称后加一符号；例如可执行档则加 "*", 目录则加 "/"。 -R：若目录下有文件，则以下之文件亦皆依序列出。 1234567891011quotacheck功能：quotacheck 命令用于检查磁盘的使用空间与限制。补充说明：执行quotacheck指令，扫描挂入系统的分区，并在各分区的文件系统根目录下产生quota.user和quota.group文件，设置用户和群组的磁盘空间限制。语法：quotacheck [-adgRuv][文件系统...]参数说明： -a：扫描在/etc/fstab文件里，有加入quota设置的分区。 -d：详细显示指令执行过程，便于排错或了解程序执行的情形。 -g：扫描磁盘空间时，计算每个群组识别码所占用的目录和文件数目。 -R：排除根目录所在的分区。 -u：扫描磁盘空间时，计算每个用户识别码所占用的目录和文件数目。 -v：显示指令执行过程。 123456789quotaoff功能：quotaoff 命令用于关闭磁盘空间限制。补充说明：执行quotaoff指令可关闭用户和群组的磁盘空间限制。语法：quotaoff [-aguv][文件系统...]参数说明： -a：关闭在/etc/fstab文件里，有加入quota设置的分区的空间限制。 -g：关闭群组的磁盘空间限制。 -u：关闭用户的磁盘空间限制。 -v：显示指令执行过程。 1234567lndir (macos中不存在)功能：lndir 命令用于连接目录内容。补充说明：执行lndir指令，可一口气把源目录底下的文件和子目录统统建立起相互对应的符号连接。语法：lndir [-ignorelinks][-silent][源目录][目的目录]参数说明： -ignorelinks：直接建立符号连接的符号连接。 -silent：不显示指令执行过程。 123456789repquota功能：repquota 命令用于检查磁盘空间限制的状态。补充说明：执行repquota指令，可报告磁盘空间限制的状况，清楚得知每位用户或每个群组已使用多少空间。语法：repquota [-aguv][文件系统...]参数说明： -a：列出在/etc/fstab文件里，有加入quota设置的分区的使用状况，包括用户和群组。 -g：列出所有群组的磁盘空间限制。 -u：列出所有用户的磁盘空间限制。 -v：显示该用户或群组的所有空间限制。 123456789quotaon功能：quotaon 命令用于开启磁盘空间限制。补充说明：执行quotaon指令可开启用户和群组的才磅秒年空间限制，各分区的文件系统根目录必须有quota.user和quota.group配置文件。语法：quotaon [-aguv][文件系统...]参数说明： -a：开启在/ect/fstab文件里，有加入quota设置的分区的空间限制。 -g：开启群组的磁盘空间限制。 -u：开启用户的磁盘空间限制。 -v：显示指令指令执行过程。]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS常用样式记录]]></title>
    <url>%2F2017%2F07%2F27%2Fcss-often-used%2F</url>
    <content type="text"><![CDATA[单侧边框线（0.5px）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748.border-top-line &#123; position: relative; &amp;:before &#123; content: ''; position: absolute; left: 0; top: -1px; width: 100%; height: 1px; background: linear-gradient(180deg, #fff 50%, #ccc); &#125;&#125;.border-bottom-line &#123; position: relative; &amp;:after &#123; content: ''; position: absolute; left: 0; bottom: -1px; width: 100%; height: 1px; background: linear-gradient(0deg, #fff 50%, #ccc); &#125;&#125;.border-left-line &#123; position: relative; &amp;:before &#123; content: ''; position: absolute; top: 0; left: -1px; width: 1px; height: 100%; background: linear-gradient(90deg, #fff 50%, #ccc); &#125;&#125;.border-right-line &#123; position: relative; &amp;:after &#123; content: ''; position: absolute; top: 0; right: -1px; width: 1px; height: 100%; background: linear-gradient(-90deg, #fff 50%, #ccc); &#125;&#125;]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scss使用指南]]></title>
    <url>%2F2017%2F07%2F24%2Fscss%2F</url>
    <content type="text"><![CDATA[规则嵌套 规则嵌套主要用来避免重复写父选择器&amp;符号用来表示父选择器的引用，不写&amp;相当于在子选择器前面添加 1234567891011#content &#123; article &#123; h1 &#123; color: #333 &#125; p &#123; margin-bottom: 1.4em &#125; &#125; aside &#123; background-color: #EEE &#125; -- 相当于 &amp; aside &#123; background-color: #EEE &#125;&#125;// 编译后#content article h1 &#123; color: #333 &#125;#content article p &#123; margin-bottom: 1.4em &#125;#content aside &#123; background-color: #EEE &#125; 123456789101112131415article &#123; ~ article &#123; border-top: 1px dashed #ccc &#125; -- 相当于 &amp; ~ article &#123; border-top: 1px dashed #ccc &#125; &gt; section &#123; background: #eee &#125; -- 相当于 &amp; &gt; section &#123; background: #eee &#125; dl &gt; &#123; dt &#123; color: #333 &#125; dd &#123; color: #555 &#125; &#125; nav + &amp; &#123; margin-top: 0 &#125;&#125;// 编译后article ~ article &#123; border-top: 1px dashed #ccc &#125;article &gt; footer &#123; background: #eee &#125;article dl &gt; dt &#123; color: #333 &#125;article dl &gt; dd &#123; color: #555 &#125;nav + article &#123; margin-top: 0 &#125; 属性嵌套 属性嵌套主要用来避免重复写根属性属性嵌套根属性和规则嵌套选择器的书写区别在于属性嵌套根属性后面有个冒号(:) 12345678910111213nav &#123; border: &#123; style: solid; width: 1px; color: #ccc; &#125;&#125;// 等同于nav &#123; border-style: solid; border-width: 1px; border-color: #ccc;&#125; 123456789101112nav &#123; border: 1px solid #ccc &#123; left: 0px; right: 0px; &#125;&#125;// 等同于nav &#123; border: 1px solid #ccc; border-left: 0px; border-right: 0px;&#125; 变量 $符号用来标识变量定义的变量用在样式声明的属性值中 1234567891011$nav-color: #F90;nav &#123; $width: 100px; -- 定义在.nav规则内部的$width只能在.nav内部使用 width: $width; color: $nav-color;&#125;// 编译后nav &#123; width: 100px; color: #F90;&#125; 变量默认值：!default如果变量没有赋值或赋值为null，变量值为!default标记的默认值 123456789101112$content: "First content";$content: "Second content?" !default;$new_content: "First time reference" !default;#main &#123; content: $content; new-content: $new_content;&#125;// 编译后#main &#123; content: "First content"; new-content: "First time reference";&#125; 123456789$content: null;$content: "Non-null content" !default;#main &#123; content: $content;&#125;// 编译后#main &#123; content: "Non-null content";&#125; 函数 @function用来自定义一个scss函数@return用来返回函数的返回值@function定义的函数中必须有@return定义的函数用在样式声明的属性值中 12345678910$grid-width: 40px;$gutter-width: 10px;@function grid-width($n) &#123; @return $n * $grid-width + ($n - 1) * $gutter-width;&#125;#sidebar &#123; width: grid-width(5); &#125; -- 等同于 #sidebar &#123; width: grid-width($n: 5); &#125;// 编译后#sidebar &#123; width: 240px;&#125; @import @import用来导入其它独立的css/scss片段使用@import时，.sass和.scss文件后缀可以省略局部文件(片段)：文件名以下划线(_)开头，编译时不会生成对应的css文件局部文件(片段)的导入可以省略文件名中的下划线(_)同一目录下不能同时存在带下划线和不带下划线的同名文件，如_colors.scss不能和colors.scss共存 原生的CSS @import：会造成浏览器解析css时有额外的下载以下几种情况会使用原生的CSS @import 被导入的文件扩展名是.css，如@import “foo.css”; 被导入的文件名是一个url地址，如@import “http://foo.com/bar“; 被导入的文件名是css的url()值，如@import url(foo); @import包含了任何媒体查询，如@import “foo” screen; 123456789101112131415161718// 普通@import// _example.scss.example &#123; color: red;&#125;// main.scss@import "example";#main &#123; color: blue;&#125;// 等同于// main.scss.example &#123; color: red;&#125;#main &#123; color: blue;&#125; 12345678910111213141516// 嵌套@import// _example.scss.example &#123; color: red;&#125;// main.scss#main &#123; @import "example";&#125;// 等同于// main.scss#main &#123; .example &#123; color: red; &#125;&#125; 12// 一个@import引入多个文件@import "example", "colors"; @mixin &amp; @include &amp; @content @mixin主要用来将重用的css代码提取出来@include用来引入这些被@mixin提取出来的css代码@mixin定义中可以@include其它@mixin 12345678910111213141516171819202122@mixin large-text &#123; font: &#123; -- 注意这是属性嵌套 family: Arial; size: 20px; weight: bold; &#125; color: #ff0000;&#125;.page-title &#123; @include large-text; -- 注意没有""，和@import不同 padding: 4px; margin-top: 10px;&#125;// 编译后.page-title &#123; font-family: Arial; font-size: 20px; font-weight: bold; color: #ff0000; padding: 4px; margin-top: 10px;&#125; 123456789101112@mixin silly-links &#123; a &#123; -- 注意这是规则嵌套 color: blue; background-color: red; &#125;&#125;@include silly-links;// 编译后a &#123; color: blue; background-color: red;&#125; 12345678910111213141516171819202122@mixin no-bullets &#123; list-style: none; li &#123; list-style-image: none; list-style-type: none; margin-left: 0px; &#125;&#125;ul.plain &#123; color: #444; @include no-bullets;&#125;// 编译后ul.plain &#123; color: #444; list-style: none;&#125;ul.plain li &#123; list-style-image: none; list-style-type: none; margin-left: 0px;&#125; 123456@mixin highlighted-background &#123; background-color: #fc0; &#125;@mixin header-text &#123; font-size: 20px; &#125;@mixin compound &#123; @include highlighted-background; @include header-text;&#125; @mixin定义时可以设置参数参数可以设置默认值参数个数不确定时，可以使用列表表示形式(list…)，如$shadows…@include传参时也可以使用列表表示形式(list…)列表表示形式只能放在参数最后，表示剩余参数 1234567891011121314@mixin sexy-border($color, $width) &#123; border: &#123; color: $color; width: $width; style: dashed; &#125;&#125;p &#123; @include sexy-border(blue, 1in); &#125;// 编译后p &#123; border-color: blue; border-width: 1in; border-style: dashed;&#125; 1234567891011121314151617181920@mixin sexy-border($color, $width: 1in) &#123; border: &#123; color: $color; width: $width; style: dashed; &#125;&#125;p &#123; @include sexy-border(blue); &#125; -- 等同于 p &#123; @include sexy-border($color: blue); &#125;h1 &#123; @include sexy-border(blue, 2in); &#125; -- 等同于 h1 &#123; @include sexy-border($color: blue, $width: 2in); &#125;// 编译后p &#123; border-color: blue; border-width: 1in; border-style: dashed;&#125;h1 &#123; border-color: blue; border-width: 2in; border-style: dashed;&#125; 1234567891011121314@mixin box-shadow($shadows...) &#123; -moz-box-shadow: $shadows; -webkit-box-shadow: $shadows; box-shadow: $shadows;&#125;.shadows &#123; @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);&#125;// 编译后.shadows &#123; -moz-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999; -webkit-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999; box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;&#125; 123456789101112131415@mixin colors($text, $background, $border) &#123; color: $text; background-color: $background; border-color: $border;&#125;$values: #ff0000, #00ff00, #0000ff;.primary &#123; @include colors($values...);&#125;// 编译后.primary &#123; color: #ff0000; background-color: #00ff00; border-color: #0000ff;&#125; @mixin定义时可以在内部设置一个@content@include引入@mixin时如果带有css声明块，会将声明块中的css声明放置到@content位置 123456789101112131415$color: white;@mixin colors($color: blue) &#123; background-color: $color; @content; border-color: $color;&#125;.colors &#123; @include colors &#123; color: $color; &#125;&#125;// 编译后.colors &#123; background-color: blue; color: white; border-color: blue;&#125; @extend @extend生成的代码量比@mixin相对更少@extend的原理：如果.seriousError @extend .error，那么样式表中的任何一处.error选择器都用[.error, .seriousError]这一选择器组进行替换 12345678910111213141516.error &#123; border: 1px #f00; background-color: #fdd;&#125;.seriousError &#123; @extend .error; border-width: 3px;&#125;// 编译后.error, .seriousError &#123; border: 1px #f00; background-color: #fdd;&#125;.seriousError &#123; border-width: 3px;&#125; 12345678910.hoverlink &#123; @extend a:hover;&#125;.comment a.user:hover &#123; font-weight: bold;&#125;// 编译后.comment a.user:hover, .comment .user.hoverlink &#123; font-weight: bold;&#125; 1234567891011121314151617181920212223242526// 多继承.error &#123; border: 1px #f00; background-color: #fdd;&#125;.attention &#123; font-size: 3em; background-color: #ff0;&#125;.seriousError &#123; @extend .error; @extend .attention; border-width: 3px;&#125;// 编译后.error, .seriousError &#123; border: 1px #f00; background-color: #fdd;&#125;.attention, .seriousError &#123; font-size: 3em; background-color: #ff0;&#125;.seriousError &#123; border-width: 3px;&#125; 1234567891011121314151617181920212223242526272829303132// 链式继承.error &#123; border: 1px #f00; background-color: #fdd;&#125;.seriousError &#123; @extend .error; border-width: 3px;&#125;.criticalError &#123; @extend .seriousError; position: fixed; top: 10%; bottom: 10%; left: 10%; right: 10%;&#125;// 编译后.error, .seriousError, .criticalError &#123; border: 1px #f00; background-color: #fdd;&#125;.seriousError, .criticalError &#123; border-width: 3px;&#125;.criticalError &#123; position: fixed; top: 10%; bottom: 10%; left: 10%; right: 10%;&#125; 两条选择器序列的@entend会生成两个新的选择器一个第一条序列在第二条序列之前，一个第二条序列在第一条序列之前尽量不要使用这种序列间的@entend 123456789101112#admin .tabbar a &#123; font-weight: bold;&#125;#demo .overview .fakelink &#123; @extend a;&#125;// 编译后#admin .tabbar a,#admin .tabbar #demo .overview .fakelink,#demo .overview #admin .tabbar .fakelink &#123; font-weight: bold;&#125; 123456789101112#admin .tabbar a &#123; font-weight: bold;&#125;#admin .overview .fakelink &#123; @extend a;&#125;// 编译后#admin .tabbar a,#admin .tabbar .overview .fakelink,#admin .overview .tabbar .fakelink &#123; font-weight: bold;&#125; 使用占位选择器(%)来替代具体的选择器使用了占位选择器(%)的规则自身不会被渲染 123456789101112131415// This ruleset won't be rendered on its own.#context a%extreme &#123; color: blue; font-weight: bold; font-size: 2em;&#125;.notice &#123; @extend %extreme;&#125;// 编译后#context a.notice &#123; color: blue; font-weight: bold; font-size: 2em;&#125; 在指令中使用@extend需要使两个选择器处于同一个指令块 1234567891011// works fine@media print &#123; .error &#123; border: 1px #f00; background-color: #fdd; &#125; .seriousError &#123; @extend .error; border-width: 3px; &#125;&#125; 123456789101112// works error.error &#123; border: 1px #f00; background-color: #fdd;&#125;@media print &#123; .seriousError &#123; // INVALID EXTEND: .error is used outside of the "@media print" directive @extend .error; border-width: 3px; &#125;&#125; 运算 具体运算规则参考：SASS中文文档 - 运算 插入符 #{}用来将变量值插入到指定位置 123456789$name: foo;$attr: border;p.#&#123;$name&#125; &#123; #&#123;$attr&#125;-color: blue;&#125;// 编译后p.foo &#123; border-color: blue;&#125; 控制指令 @if &amp; @else if &amp; @else 12345678910111213141516$type: monster;p &#123; @if $type == ocean &#123; color: blue; &#125; @else if $type == matador &#123; color: red; &#125; @else if $type == monster &#123; color: green; &#125; @else &#123; color: black; &#125;&#125;// 编译后p &#123; color: green;&#125; @for@for $var from &lt;start&gt; through &lt;end&gt; – 包含&lt;end&gt;@for $var from &lt;start&gt; to &lt;end&gt; – 不包含&lt;end&gt;$var可以是任意变量名 12345678910111213@for $i from 1 through 3 &#123; .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;&#125;// 编译后.item-1 &#123; width: 2em;&#125;.item-2 &#123; width: 4em;&#125;.item-3 &#123; width: 6em;&#125; 12345678910@for $i from 1 to 3 &#123; .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;&#125;// 编译后.item-1 &#123; width: 2em;&#125;.item-2 &#123; width: 4em;&#125; @each@each $var in &lt;list&gt;$var可以是任意变量名 123456789101112131415161718@each $animal in puma, sea-slug, egret, salamander &#123; .#&#123;$animal&#125;-icon &#123; background-image: url('/images/#&#123;$animal&#125;.png'); &#125;&#125;// 编译后.puma-icon &#123; background-image: url('/images/puma.png');&#125;.sea-slug-icon &#123; background-image: url('/images/sea-slug.png');&#125;.egret-icon &#123; background-image: url('/images/egret.png');&#125;.salamander-icon &#123; background-image: url('/images/salamander.png');&#125; @while 123456789101112131415$i: 6;@while $i &gt; 0 &#123; .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125; $i: $i - 2;&#125;// 编译后.item-6 &#123; width: 12em;&#125;.item-4 &#123; width: 8em;&#125;.item-2 &#123; width: 4em;&#125; 媒体查询123456789101112131415.sidebar &#123; width: 300px; @media screen and (orientation: landscape) &#123; width: 500px; &#125;&#125;// 编译后.sidebar &#123; width: 300px;&#125;@media screen and (orientation: landscape) &#123; .sidebar &#123; width: 500px; &#125;&#125; 12345678910111213@media screen &#123; .sidebar &#123; @media (orientation: landscape) &#123; width: 500px; &#125; &#125;&#125;// 编译后@media screen and (orientation: landscape) &#123; .sidebar &#123; width: 500px; &#125;&#125; 注释 css的标准注释：/ … /scss的静默注释：// … ，注释内容不会出现在生成的css文件中 1234body &#123; color: #333; // 这种注释内容不会出现在生成的css文件中 padding: 0; /* 这种注释内容会出现在生成的css文件中 */&#125; 相关链接 SASS中文文档SASS基础教程]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
</search>