<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[个人css常用class记录]]></title>
    <url>%2F2017%2F07%2F27%2Fcss-class-collection%2F</url>
    <content type="text"><![CDATA[单侧边框线（0.5px）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748.border-top-line &#123; position: relative; &amp;:before &#123; content: ''; position: absolute; left: 0; top: -1px; width: 100%; height: 1px; background: linear-gradient(180deg, #fff 50%, #ccc); &#125;&#125;.border-bottom-line &#123; position: relative; &amp;:after &#123; content: ''; position: absolute; left: 0; bottom: -1px; width: 100%; height: 1px; background: linear-gradient(0deg, #fff 50%, #ccc); &#125;&#125;.border-left-line &#123; position: relative; &amp;:before &#123; content: ''; position: absolute; top: 0; left: -1px; width: 1px; height: 100%; background: linear-gradient(90deg, #fff 50%, #ccc); &#125;&#125;.border-right-line &#123; position: relative; &amp;:after &#123; content: ''; position: absolute; top: 0; right: -1px; width: 1px; height: 100%; background: linear-gradient(-90deg, #fff 50%, #ccc); &#125;&#125;]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scss使用指南]]></title>
    <url>%2F2017%2F07%2F24%2Fscss%2F</url>
    <content type="text"><![CDATA[规则嵌套 规则嵌套主要用来避免重复写父选择器&amp;符号用来表示父选择器的引用，不写&amp;相当于在子选择器前面添加 1234567891011#content &#123; article &#123; h1 &#123; color: #333 &#125; p &#123; margin-bottom: 1.4em &#125; &#125; aside &#123; background-color: #EEE &#125; -- 相当于 &amp; aside &#123; background-color: #EEE &#125;&#125;// 编译后#content article h1 &#123; color: #333 &#125;#content article p &#123; margin-bottom: 1.4em &#125;#content aside &#123; background-color: #EEE &#125; 123456789101112131415article &#123; ~ article &#123; border-top: 1px dashed #ccc &#125; -- 相当于 &amp; ~ article &#123; border-top: 1px dashed #ccc &#125; &gt; section &#123; background: #eee &#125; -- 相当于 &amp; &gt; section &#123; background: #eee &#125; dl &gt; &#123; dt &#123; color: #333 &#125; dd &#123; color: #555 &#125; &#125; nav + &amp; &#123; margin-top: 0 &#125;&#125;// 编译后article ~ article &#123; border-top: 1px dashed #ccc &#125;article &gt; footer &#123; background: #eee &#125;article dl &gt; dt &#123; color: #333 &#125;article dl &gt; dd &#123; color: #555 &#125;nav + article &#123; margin-top: 0 &#125; 属性嵌套 属性嵌套主要用来避免重复写根属性属性嵌套根属性和规则嵌套选择器的书写区别在于属性嵌套根属性后面有个冒号(:) 12345678910111213nav &#123; border: &#123; style: solid; width: 1px; color: #ccc; &#125;&#125;// 等同于nav &#123; border-style: solid; border-width: 1px; border-color: #ccc;&#125; 123456789101112nav &#123; border: 1px solid #ccc &#123; left: 0px; right: 0px; &#125;&#125;// 等同于nav &#123; border: 1px solid #ccc; border-left: 0px; border-right: 0px;&#125; 变量 $符号用来标识变量定义的变量用在样式声明的属性值中 1234567891011$nav-color: #F90;nav &#123; $width: 100px; -- 定义在.nav规则内部的$width只能在.nav内部使用 width: $width; color: $nav-color;&#125;// 编译后nav &#123; width: 100px; color: #F90;&#125; 变量默认值：!default如果变量没有赋值或赋值为null，变量值为!default标记的默认值 123456789101112$content: "First content";$content: "Second content?" !default;$new_content: "First time reference" !default;#main &#123; content: $content; new-content: $new_content;&#125;// 编译后#main &#123; content: "First content"; new-content: "First time reference";&#125; 123456789$content: null;$content: "Non-null content" !default;#main &#123; content: $content;&#125;// 编译后#main &#123; content: "Non-null content";&#125; 函数 @function用来自定义一个scss函数@return用来返回函数的返回值@function定义的函数中必须有@return定义的函数用在样式声明的属性值中 12345678910$grid-width: 40px;$gutter-width: 10px;@function grid-width($n) &#123; @return $n * $grid-width + ($n - 1) * $gutter-width;&#125;#sidebar &#123; width: grid-width(5); &#125; -- 等同于 #sidebar &#123; width: grid-width($n: 5); &#125;// 编译后#sidebar &#123; width: 240px;&#125; @import @import用来导入其它独立的css/scss片段使用@import时，.sass和.scss文件后缀可以省略局部文件(片段)：文件名以下划线(_)开头，编译时不会生成对应的css文件局部文件(片段)的导入可以省略文件名中的下划线(_)同一目录下不能同时存在带下划线和不带下划线的同名文件，如_colors.scss不能和colors.scss共存 原生的CSS @import：会造成浏览器解析css时有额外的下载以下几种情况会使用原生的CSS @import 被导入的文件扩展名是.css，如@import “foo.css”; 被导入的文件名是一个url地址，如@import “http://foo.com/bar“; 被导入的文件名是css的url()值，如@import url(foo); @import包含了任何媒体查询，如@import “foo” screen; 123456789101112131415161718// 普通@import// _example.scss.example &#123; color: red;&#125;// main.scss@import "example";#main &#123; color: blue;&#125;// 等同于// main.scss.example &#123; color: red;&#125;#main &#123; color: blue;&#125; 12345678910111213141516// 嵌套@import// _example.scss.example &#123; color: red;&#125;// main.scss#main &#123; @import "example";&#125;// 等同于// main.scss#main &#123; .example &#123; color: red; &#125;&#125; 12// 一个@import引入多个文件@import "example", "colors"; @mixin &amp; @include &amp; @content @mixin主要用来将重用的css代码提取出来@include用来引入这些被@mixin提取出来的css代码@mixin定义中可以@include其它@mixin 12345678910111213141516171819202122@mixin large-text &#123; font: &#123; -- 注意这是属性嵌套 family: Arial; size: 20px; weight: bold; &#125; color: #ff0000;&#125;.page-title &#123; @include large-text; -- 注意没有""，和@import不同 padding: 4px; margin-top: 10px;&#125;// 编译后.page-title &#123; font-family: Arial; font-size: 20px; font-weight: bold; color: #ff0000; padding: 4px; margin-top: 10px;&#125; 123456789101112@mixin silly-links &#123; a &#123; -- 注意这是规则嵌套 color: blue; background-color: red; &#125;&#125;@include silly-links;// 编译后a &#123; color: blue; background-color: red;&#125; 12345678910111213141516171819202122@mixin no-bullets &#123; list-style: none; li &#123; list-style-image: none; list-style-type: none; margin-left: 0px; &#125;&#125;ul.plain &#123; color: #444; @include no-bullets;&#125;// 编译后ul.plain &#123; color: #444; list-style: none;&#125;ul.plain li &#123; list-style-image: none; list-style-type: none; margin-left: 0px;&#125; 123456@mixin highlighted-background &#123; background-color: #fc0; &#125;@mixin header-text &#123; font-size: 20px; &#125;@mixin compound &#123; @include highlighted-background; @include header-text;&#125; @mixin定义时可以设置参数参数可以设置默认值参数个数不确定时，可以使用列表表示形式(list…)，如$shadows…@include传参时也可以使用列表表示形式(list…)列表表示形式只能放在参数最后，表示剩余参数 1234567891011121314@mixin sexy-border($color, $width) &#123; border: &#123; color: $color; width: $width; style: dashed; &#125;&#125;p &#123; @include sexy-border(blue, 1in); &#125;// 编译后p &#123; border-color: blue; border-width: 1in; border-style: dashed;&#125; 1234567891011121314151617181920@mixin sexy-border($color, $width: 1in) &#123; border: &#123; color: $color; width: $width; style: dashed; &#125;&#125;p &#123; @include sexy-border(blue); &#125; -- 等同于 p &#123; @include sexy-border($color: blue); &#125;h1 &#123; @include sexy-border(blue, 2in); &#125; -- 等同于 h1 &#123; @include sexy-border($color: blue, $width: 2in); &#125;// 编译后p &#123; border-color: blue; border-width: 1in; border-style: dashed;&#125;h1 &#123; border-color: blue; border-width: 2in; border-style: dashed;&#125; 1234567891011121314@mixin box-shadow($shadows...) &#123; -moz-box-shadow: $shadows; -webkit-box-shadow: $shadows; box-shadow: $shadows;&#125;.shadows &#123; @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);&#125;// 编译后.shadows &#123; -moz-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999; -webkit-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999; box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;&#125; 123456789101112131415@mixin colors($text, $background, $border) &#123; color: $text; background-color: $background; border-color: $border;&#125;$values: #ff0000, #00ff00, #0000ff;.primary &#123; @include colors($values...);&#125;// 编译后.primary &#123; color: #ff0000; background-color: #00ff00; border-color: #0000ff;&#125; @mixin定义时可以在内部设置一个@content@include引入@mixin时如果带有css声明块，会将声明块中的css声明放置到@content位置 123456789101112131415$color: white;@mixin colors($color: blue) &#123; background-color: $color; @content; border-color: $color;&#125;.colors &#123; @include colors &#123; color: $color; &#125;&#125;// 编译后.colors &#123; background-color: blue; color: white; border-color: blue;&#125; @extend @extend生成的代码量比@mixin相对更少@extend的原理：如果.seriousError @extend .error，那么样式表中的任何一处.error选择器都用[.error, .seriousError]这一选择器组进行替换 12345678910111213141516.error &#123; border: 1px #f00; background-color: #fdd;&#125;.seriousError &#123; @extend .error; border-width: 3px;&#125;// 编译后.error, .seriousError &#123; border: 1px #f00; background-color: #fdd;&#125;.seriousError &#123; border-width: 3px;&#125; 12345678910.hoverlink &#123; @extend a:hover;&#125;.comment a.user:hover &#123; font-weight: bold;&#125;// 编译后.comment a.user:hover, .comment .user.hoverlink &#123; font-weight: bold;&#125; 1234567891011121314151617181920212223242526// 多继承.error &#123; border: 1px #f00; background-color: #fdd;&#125;.attention &#123; font-size: 3em; background-color: #ff0;&#125;.seriousError &#123; @extend .error; @extend .attention; border-width: 3px;&#125;// 编译后.error, .seriousError &#123; border: 1px #f00; background-color: #fdd;&#125;.attention, .seriousError &#123; font-size: 3em; background-color: #ff0;&#125;.seriousError &#123; border-width: 3px;&#125; 1234567891011121314151617181920212223242526272829303132// 链式继承.error &#123; border: 1px #f00; background-color: #fdd;&#125;.seriousError &#123; @extend .error; border-width: 3px;&#125;.criticalError &#123; @extend .seriousError; position: fixed; top: 10%; bottom: 10%; left: 10%; right: 10%;&#125;// 编译后.error, .seriousError, .criticalError &#123; border: 1px #f00; background-color: #fdd;&#125;.seriousError, .criticalError &#123; border-width: 3px;&#125;.criticalError &#123; position: fixed; top: 10%; bottom: 10%; left: 10%; right: 10%;&#125; 两条选择器序列的@entend会生成两个新的选择器一个第一条序列在第二条序列之前，一个第二条序列在第一条序列之前尽量不要使用这种序列间的@entend 123456789101112#admin .tabbar a &#123; font-weight: bold;&#125;#demo .overview .fakelink &#123; @extend a;&#125;// 编译后#admin .tabbar a,#admin .tabbar #demo .overview .fakelink,#demo .overview #admin .tabbar .fakelink &#123; font-weight: bold;&#125; 123456789101112#admin .tabbar a &#123; font-weight: bold;&#125;#admin .overview .fakelink &#123; @extend a;&#125;// 编译后#admin .tabbar a,#admin .tabbar .overview .fakelink,#admin .overview .tabbar .fakelink &#123; font-weight: bold;&#125; 使用占位选择器(%)来替代具体的选择器使用了占位选择器(%)的规则自身不会被渲染 123456789101112131415// This ruleset won't be rendered on its own.#context a%extreme &#123; color: blue; font-weight: bold; font-size: 2em;&#125;.notice &#123; @extend %extreme;&#125;// 编译后#context a.notice &#123; color: blue; font-weight: bold; font-size: 2em;&#125; 在指令中使用@extend需要使两个选择器处于同一个指令块 1234567891011// works fine@media print &#123; .error &#123; border: 1px #f00; background-color: #fdd; &#125; .seriousError &#123; @extend .error; border-width: 3px; &#125;&#125; 123456789101112// works error.error &#123; border: 1px #f00; background-color: #fdd;&#125;@media print &#123; .seriousError &#123; // INVALID EXTEND: .error is used outside of the "@media print" directive @extend .error; border-width: 3px; &#125;&#125; 运算 具体运算规则参考：http://sass.bootcss.com/docs/sass-reference/#yun-suan 插入符 #{}用来将变量值插入到指定位置 123456789$name: foo;$attr: border;p.#&#123;$name&#125; &#123; #&#123;$attr&#125;-color: blue;&#125;// 编译后p.foo &#123; border-color: blue;&#125; 控制指令 @if &amp; @else if &amp; @else 12345678910111213141516$type: monster;p &#123; @if $type == ocean &#123; color: blue; &#125; @else if $type == matador &#123; color: red; &#125; @else if $type == monster &#123; color: green; &#125; @else &#123; color: black; &#125;&#125;// 编译后p &#123; color: green;&#125; @for@for $var from through – 包含@for $var from to – 不包含$var可以是任意变量名 12345678910111213@for $i from 1 through 3 &#123; .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;&#125;// 编译后.item-1 &#123; width: 2em;&#125;.item-2 &#123; width: 4em;&#125;.item-3 &#123; width: 6em;&#125; 12345678910@for $i from 1 to 3 &#123; .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;&#125;// 编译后.item-1 &#123; width: 2em;&#125;.item-2 &#123; width: 4em;&#125; @each@each $var in $var可以是任意变量名 123456789101112131415161718@each $animal in puma, sea-slug, egret, salamander &#123; .#&#123;$animal&#125;-icon &#123; background-image: url('/images/#&#123;$animal&#125;.png'); &#125;&#125;// 编译后.puma-icon &#123; background-image: url('/images/puma.png');&#125;.sea-slug-icon &#123; background-image: url('/images/sea-slug.png');&#125;.egret-icon &#123; background-image: url('/images/egret.png');&#125;.salamander-icon &#123; background-image: url('/images/salamander.png');&#125; @while 123456789101112131415$i: 6;@while $i &gt; 0 &#123; .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125; $i: $i - 2;&#125;// 编译后.item-6 &#123; width: 12em;&#125;.item-4 &#123; width: 8em;&#125;.item-2 &#123; width: 4em;&#125; 媒体查询123456789101112131415.sidebar &#123; width: 300px; @media screen and (orientation: landscape) &#123; width: 500px; &#125;&#125;// 编译后.sidebar &#123; width: 300px;&#125;@media screen and (orientation: landscape) &#123; .sidebar &#123; width: 500px; &#125;&#125; 12345678910111213@media screen &#123; .sidebar &#123; @media (orientation: landscape) &#123; width: 500px; &#125; &#125;&#125;// 编译后@media screen and (orientation: landscape) &#123; .sidebar &#123; width: 500px; &#125;&#125; 注释 css的标准注释：/ … /scss的静默注释：// … ，注释内容不会出现在生成的css文件中 1234body &#123; color: #333; // 这种注释内容不会出现在生成的css文件中 padding: 0; /* 这种注释内容会出现在生成的css文件中 */&#125; 相关链接 http://sass.bootcss.com/docs/sass-reference/http://www.sasschina.com/guide/]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
</search>